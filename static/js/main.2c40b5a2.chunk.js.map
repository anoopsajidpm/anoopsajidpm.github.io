{"version":3,"sources":["modules/SurahInfo/SurahInfo.js","components/Listview/Listview.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["filteredLangs","defaultTrans","undefined","LangPopup","props","selectedTrans","selectLangClass","trans_conf","length","filter","item","active","react_default","a","createElement","className","translations","nativeName","onChange","evt","lng","target","value","temp","code","name","selectLang","id","onClick","map","key","SurahInfo","navBack","onNavBack","selectedSurah","navNext","onNavNext","navNextClass","navBackClass","refreshData","inputVal","nextBtnText","backBtnClass","backBtnText","englishName","englishNameTranslation","details","ayahNumber","data-value","number","SurahInfo_LangPopup","processData","selectTrans","getLangName","lang","Langs","Listview","results","List_default","component","disablePadding","dense","index","ListItem_default","ListItemText_default","edition","type","language","audio","controls","src","text","Loader","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selectSurah","dataVal","getAttribute","getSurahDetails","findLang","array","title","result","navigateAyah","data","valNow","Number","state","totAyahs","numberOfAyahs","navBtnClass","back","next","selSurahNumber","setState","String","searchForAyah","mainResult","ayahDetails","rawData","surahList","searchError","searchBlockClass","preloader","filterInput","q_edition_ar","q_edition_trans","q_edition_audio","searchBtnClass","url_search","totalQuranAyahs","shareBody","versesNowShowing","handleLoad","bind","assertThisInitialized","resetView","selectTranslation","window","location","search","_this2","addEventListener","_this3","Surahs","getTotalAyahCount","url_origin","origin","extractSearchStrings","checkForSearchString","surahs","totalAyah","sur","_this4","search_string","console","log","split","url_param","valid","url_string","str_split","replace","str","res","parts","push","isValid","event","_this5","loader","q_editions","isRefValid","validateInput","url","options","cacheKey","cached","sessionStorage","getItem","response","Response","Blob","Promise","resolve","fetch","then","ct","headers","get","match","clone","content","setItem","cachedFetch","json","surah","numberInSurah","catch","trans","_this6","_this7","verseShowing","filteredItem","flag","assign","hizbQuarter","juz","manzil","page","ruku","sajda","searchBtn","_this8","keyCode","fetchSurahDetails","_this9","getAyahFromUrl","_this10","ayah","ayahInput","focus","selSurah","e","chapts","newArray","d","values","substr","listview","_this11","components_Listview_Listview","share_url","SurahInfo_SurahInfo","totalAyahs","closeBubble","hidden","reactjs_popup_es","trigger","on","position","modal","closeOnDocumentClick","onRequestClose","modalIsOpen","ref","surahLabel","updateInputVal","onKeyDown","verifyInputKey","placeholder","input","pattern","min","max","components_Loader_Loader","React","Component","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c40b5a2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport Langs from '../../assets/json/langs.json';\r\nimport trans_conf from '../../assets/json/lang_config.json';\r\n//import Popup from \"reactjs-popup\";\r\n\r\nvar chkTrans = {}; // = {'english': false, 'malayalam' : false};\r\n\r\nlet filteredLangs ; //Langs.filter(item => item.code === 'en' || item.code === 'ml' );\r\nlet defaultTrans = undefined;\r\nlet popupStatus = false ;\r\n\r\n\r\nlet filteredTrans = () => {\r\n    let res = [];\r\n    \r\n    let test = {};\r\n    console.log(trans_conf);\r\n    trans_conf.map(lng => {\r\n        let temp = Langs.filter(item => item.code === lng.code)[0];\r\n        res.push(temp);\r\n        temp.active = lng.active; //)? true :false;\r\n        \r\n        /*if(Number(lng.active)){\r\n            //setTrans(temp);\r\n            selectedTrans = temp;\r\n        }*/\r\n    })\r\n    //console.log(trans_active);\r\n    //console.log(selectedTrans);\r\n    return res;\r\n}\r\n\r\nlet findLang = (array, title) => {\r\n    let result = array.filter(item => item.code === title );\r\n    if(result.length){\r\n        return result[0];\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst LangPopup =  (props) => {\r\n    //console.log(props);\r\n    let selectLangClass = 'hide';\r\n    //let [selectedTrans, setTrans] = useState(props.translations);\r\n\r\n    //let selectedTrans = props.translations;\r\n    //console.log(props.translations);\r\n    let selectedTrans;\r\n    filteredLangs = trans_conf; // filteredTrans();\r\n    if(filteredLangs && filteredLangs.length){\r\n        defaultTrans = filteredLangs.filter(item => item.active );\r\n    }\r\n\r\n    if(defaultTrans.length){\r\n        //setTrans(defaultTrans[0]);\r\n        selectedTrans = defaultTrans[0];\r\n    } else {\r\n        selectedTrans = undefined;\r\n    }\r\n\r\n    //console.log(selectedTrans);\r\n\r\n    let selectLang = evt => {\r\n        let lng = evt.target.value; //getAttribute('data-value');\r\n        \r\n        let temp = filteredLangs.filter(item => item.code === lng );\r\n\r\n        if(temp.length){\r\n            selectedTrans = {\r\n                code: temp[0].code, \r\n                name: temp[0].name, \r\n                nativeName: temp[0].nativeName, \r\n                active: true\r\n            };\r\n        } else {\r\n            selectedTrans = undefined;\r\n        }\r\n\r\n        props.onChange(selectedTrans);\r\n    }\r\n\r\n      let showSelectLang = () => {\r\n          selectLangClass = 'show';\r\n      }\r\n\r\n      return  <div className='lang-select'>\r\n        <section className='select-value-wrapper'>\r\n            <label >Translation: \r\n                <span>\r\n                    {props.translations && props.translations.nativeName ? ' ' + props.translations.nativeName : ' None'}\r\n                </span>\r\n            </label>\r\n\r\n        </section>\r\n        <select onChange={evt => selectLang(evt)} id='q-lang' className={selectLangClass} onClick={showSelectLang}>\r\n            <option value=\"denied\">None</option>\r\n            {\r\n                filteredLangs.map(lng=> \r\n                    <option value={lng.code} key={lng.code}>{lng.name} - {lng.nativeName}</option>\r\n                )\r\n            }\r\n        \r\n        </select>\r\n       \r\n    </div>\r\n      \r\n}\r\n\r\nfunction SurahInfo (props) {\r\n    //const details = props.details;\r\n    const navBack = props.onNavBack;\r\n    const selectedSurah = props.selectedSurah;\r\n    //const transSelected = props.selectedLang;\r\n    const navNext = props.onNavNext;\r\n    const navNextClass = props.navNextClass;\r\n    const navBackClass = props.navBackClass;\r\n    const refreshData = props.refreshData;\r\n    //selectedTrans = props.selectedTrans;\r\n    \r\n    //const langPopupOpen = props.langPopupOpen;\r\n    //const onLangChange = props.onSelectLang;\r\n    //chkTrans = props.translations;\r\n\r\n    \r\n    const inputVal = props.inputVal;\r\n    //filteredLangs = props.filteredTrans;\r\n    //const onPopupOpen = props.langPopupOnOpen;\r\n\r\n    var nextBtnText = 'Next';\r\n    var backBtnClass = navBackClass;\r\n    var backBtnText = 'Back';\r\n\r\n    if(!inputVal){\r\n        nextBtnText = 'First Ayah';\r\n        backBtnText = ' ';\r\n        backBtnClass += ' off';\r\n    } \r\n\r\n\r\n    return(\r\n        <section className=\"titles-wrapper\">\r\n            <h2 className=\"surah-title\"> {selectedSurah.name}</h2>\r\n            \r\n            <p><span className=\"clearer small\">{selectedSurah.englishName}</span> | {selectedSurah.englishNameTranslation}</p>\r\n            \r\n            \r\n            { props.details && \r\n                <p>Holy Qur'an Ayah No: <span className=\"clearer\">{props.details.ayahNumber}</span> / 6236</p>\r\n            }\r\n            <div className=\"row-flex ayah-nav-wrapper margin top\">\r\n                \r\n                <button className={backBtnClass} value=\"Back\" data-value=\"back\" onClick={navBack} >\r\n                    {backBtnText}\r\n                </button>\r\n                    <p className=\"ayah-nav-text\">Surah: <span className=\"clearer\">{selectedSurah.number}</span> | Ayah: <span className=\"clearer\">{inputVal ? inputVal : '---'}</span></p>\r\n                <button className={navNextClass} value=\"Next\" data-value=\"next\" onClick={navNext} >\r\n                \r\n                    {nextBtnText}\r\n                </button>\r\n            </div>\r\n            <LangPopup \r\n                processData={refreshData} \r\n                translations={props.selectedTrans}\r\n                onChange={props.selectTrans}\r\n            />\r\n        </section>\r\n    )\r\n}\r\nexport default SurahInfo;","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Langs from '../../assets/json/langs.json';\nimport './Listview.scss';\n\n//import Box from '@material-ui/core/Box';\n/*import ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';*/\n//import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n/*import { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';*/\n//import Modal from '@material-ui/core/Modal';\n//import Popup from \"reactjs-popup\";\n//import IconButton from '@material-ui/core/IconButton';\n//import CommentIcon from '@material-ui/icons/Comment';\n//import Slide from '@material-ui/core/Slide';\n//import Copier from '../../modules/Copier/Copier';\n\nconst getLangName = (code) => {\n  // function to get the language name from code\n  let lang = Langs.filter(item => item.code === code);\n  //console.log(lang);\n  return (lang[0].name !== 'English' ? lang[0].name + ' | ' + lang[0].nativeName : lang[0].name);\n}\n\nfunction Listview(props) {\n\n  const results = props.results;\n  const details = props.details;\n\n  if (!props.results) return null;\n\n  return (\n    <div className=\"listview-wrapper\">\n      <List component='ul' disablePadding={false} dense={false} className=\"verse-list-ul\">\n        {results.map((value, index) =>\n          <ListItem key={index} className=\"no-padding\">\n            <ListItemText className=\"verse-text\" >\n              { value.edition.type === 'translation' &&\n                <span className=\"ayah-details\">{getLangName(value.edition.language) }</span>\n              }\n\n              { (value.edition.language === 'ar' && details.audio) &&\n                <audio controls=\"controls\" className=\"q-audio-player\">\n                  <source src={details.audio} type=\"audio/wav\" />\n                  Your browser does not support the <code>audio</code> element.\n                </audio>\n              }\n              <p className={value.edition.language === 'ar' ? \"txt-arabic\" : ''}>{value.text}</p>\n\n            </ListItemText>\n          </ListItem>\n        )\n        }\n      </List>\n    </div>\n  )\n}\n\nexport default Listview","import React from 'react';\nimport './Loader.scss';\n\nfunction Loader() {\n  return <div className=\"loader-wrapper\">\n    <p>Loading...</p>\n  </div>;\n}\n\nexport default Loader;","\n//main\nimport React from 'react';\n\n//styles\nimport './App.scss';\n\n//downloaded componenets\nimport 'typeface-roboto'; // font support \nimport {\n  WhatsappShareButton,\n  EmailShareButton,\n  WhatsappIcon,\n  EmailIcon\n} from 'react-share';\nimport Popup from \"reactjs-popup\";\n\n//JSON\nimport Surahs from './assets/json/SurahList.json';\nimport trans_conf from './assets/json/lang_config.json';\nimport Langs from './assets/json/langs.json';\nimport Editions from './assets/json/editions.json';\n\n//custom componenets\nimport SurahInfo from './modules/SurahInfo/SurahInfo';\nimport Listview from './components/Listview/Listview';\nimport Loader from './components/Loader/Loader';\n\n//custom modules \n// import {appMods} from './modules/App/AppModules';\n//unused - to remove\n/*import {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  WhatsappShareButton,\n  PinterestShareButton,\n  VKShareButton,\n  OKShareButton,\n  RedditShareButton,\n  TumblrShareButton,\n  LivejournalShareButton,\n  MailruShareButton,\n  ViberShareButton,\n  WorkplaceShareButton,\n  EmailShareButton,\n} from 'react-share';*/\n//import TextField from '@material-ui/core/TextField';\n\n//import PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\n//import AppBar from '@material-ui/core/AppBar';\n//import Toolbar from '@material-ui/core/Toolbar';\n//import Popover from '@material-ui/core/Popover';\n\n//import Typography from '@material-ui/core/Typography';\n\n//import Button from '@material-ui/core/Button';\n//import Tabs from '@material-ui/core/Tabs';\n//import Tab from '@material-ui/core/Tab';\n\n//import FormGroup from '@material-ui/core/FormGroup';\n//import FormControlLabel from '@material-ui/core/FormControlLabel';\n//import Checkbox from '@material-ui/core/Checkbox';\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n//import Favorite from '@material-ui/icons/Favorite';\n//import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\n//import Qry from 'query-string';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainResult: [],\n      inputVal: '',\n      ayahDetails: {},\n      rawData: {},\n      surahList: [],\n      searchError: '',\n      searchBlockClass: 'search-wrapper',\n      selectedSurah: {},\n      selSurahNumber: 0,\n      preloader: true,\n      defaultTrans: {},\n      filterInput: '',\n      //filteredLangs: {},\n\n      q_edition_ar: 'quran-simple-enhanced',\n      q_edition_trans: ['en.asad', 'ml.abdulhameed'], //'en.pickthall', \n      q_edition_audio: 'ar.alafasy',\n      navBtnClass: { 'back': 'nav-btn back', 'next': 'nav-btn next' },\n      searchBtnClass: 'search-btn inactive',\n      url_search: '',\n      totalQuranAyahs: 0,\n      shareBody: '',\n      versesNowShowing: []\n    }\n    //const langs = JSON.parse('./langs.json');\n    this.handleLoad = this.handleLoad.bind(this);\n    this.processData = this.processData.bind(this);\n    this.resetView = this.resetView.bind(this);\n    this.searchForAyah = this.searchForAyah.bind(this);\n    this.selectTranslation = this.selectTranslation.bind(this);\n  }\n\n  // - ---- reload page with reset values\n  resetView() {\n    window.location.search = '';\n  }\n\n  componentDidMount() {\n    this.setState({\n      preloader: true\n    }, () => window.addEventListener('load', this.handleLoad));\n  }\n\n  //----- on page load  \n  handleLoad() {\n    // initialize with startup values - surah list, total ayah count, url string & search, default translation selected if any. \n    this.setState({\n      surahList: Surahs.data,\n      totalQuranAyahs: this.getTotalAyahCount(Surahs.data),\n      url_origin: window.location.origin,\n      url_search: this.extractSearchStrings(window.location.search),\n      defaultTrans: trans_conf.filter(item => item.active)[0],\n      preloader: false\n    }, () => this.checkForSearchString());\n\n\n  }\n\n  // ---- get total number of ayahs in Qur'an \n  getTotalAyahCount(surahs) {\n    let totalAyah = 0;\n    surahs.map(sur => {\n      totalAyah += sur.numberOfAyahs\n    })\n    return totalAyah;\n  }\n\n  // --- check the ayah number provided in url string\n  checkForSearchString() {\n    let search_string = this.state.url_search;\n    console.log(search_string);\n\n    if (search_string) {\n      let sur; // = search_string.split(':')[0];\n      if (search_string.split(':').length >= 2) {\n        sur = search_string.split(':')[0];\n        this.getSurahDetails(sur);\n\n      } else {\n        if (Number(search_string) <= this.state.totalQuranAyahs) {\n          this.setState({\n            inputVal: search_string\n          }, () => this.searchForAyah());\n        } else {\n          console.log('Invalid reference');\n        }\n      }\n\n    }\n  }\n\n  // --- extract surah & ayah numbers from url string\n  extractSearchStrings(url_param) {\n\n    //let url_param = window.location.search;\n    let url_string = '';\n    //let url_param = this.state.url_search;\n    let str_split = [];\n    let valid;\n    if (url_param) {\n      url_param = String(url_param).replace('?', '');\n      str_split = url_param.split(':'); // if -> ?<surahnumber>:<ayahnumber>\n      if (str_split.length > 1) {\n        str_split.map(str => {\n          if (Number(str)) {\n            valid = true;\n          } else {\n            valid = false;\n          }\n        });\n        if (valid) {\n          url_string = url_param;\n        }\n      } else {\n        str_split = url_param.split('&'); // if -> ?surah=<num>&ayah=<num>\n        let res = [];\n        if (str_split.length > 1) { // if param has 2 parts\n          str_split.map(str => {\n            let parts = str.split('='); // e.g: foo='bar'\n            if (parts.length === 2) { // if <search>=<value>\n              if (Number(parts[1])) {\n                res.push(parts[1]);\n              }\n            } else {\n              if (Number(parts[0])) {\n                res.push(parts[0]);\n              }\n            }\n          });\n          url_string = String(res).replace(',', ':');\n        } else { // if param has only 1 part\n          let parts = str_split[0].split('='); // e.g: foo='bar'\n          if (parts.length === 2) { // if <search>=<value>\n            if (Number(parts[1])) {\n              url_string = parts[1];\n            }\n          } else {\n            if (Number(parts[0])) {\n              url_string = parts[0];\n            }\n          }\n        }\n\n      }\n\n    }\n    return url_string\n  }\n\n  // -- get the languages opted by user\n  /*filteredTrans() {\n      let res = [];\n      let test = {};\n      trans_conf.map(lng => {\n          let temp = Langs.filter(item => item.code === lng.code)[0];\n          res.push(temp);\n          temp.active = Number(lng.active)? true :false;\n          \n          if(Number(lng.active)){\n              this.selectTranslation(temp);\n          }\n      })\n      //console.log(this.state.selectedTrans);\n      return res;\n  }*/\n\n  // -- validate the ayah number input from user\n  validateInput(value) {\n    let isValid = true;\n    let totAyahs;\n    if (this.state.selectedSurah.number) {\n      totAyahs = Number(this.state.selectedSurah.numberOfAyahs);\n    }\n    else {\n      totAyahs = 6236;\n    }\n\n    if (Number(value) > totAyahs) {\n      isValid = false;\n    }\n    return isValid;\n  }\n\n  // --  search for ayah result \n  searchForAyah(event) {\n    let filter = Number(this.state.inputVal);\n    let loader = this.state.preloader;\n    let q_editions = (this.state.q_edition_ar + ',' + this.state.q_edition_trans + ',' + this.state.q_edition_audio);\n\n    if (this.state.ayahDetails && this.state.ayahDetails.audio) {\n      // reset existing audio data \n      this.setState({\n        ayahDetails: { audio: '' }\n      })\n    }\n\n    if (!loader) {\n      this.setState({\n        preloader: true\n      });\n    }\n    let isRefValid = this.validateInput(filter);\n\n    if (!filter || !isRefValid) {\n      console.log(this.state.searchError);\n      this.setState({\n        preloader: false\n      });\n      return false;\n    }\n\n\n    if (String(filter).split(':').length <= 1) {\n      if (this.state.selSurahNumber > 0) {\n        filter = this.state.selSurahNumber + \":\" + filter;\n      }\n    }\n    const cachedFetch = (url, options) => {\n      // Use the URL as the cache key to sessionStorage\n      let cacheKey = url\n      // START new cache HIT code\n      let cached = sessionStorage.getItem(cacheKey)\n      if (cached !== null) {\n        // it was in sessionStorage! Yay!\n        console.log('already cached')\n        let response = new Response(new Blob([cached]));\n        return Promise.resolve(response);\n      }\n      // END new cache HIT code\n      return fetch(url, options).then(response => {\n        // let's only store in cache if the content-type is\n        // JSON or something non-binary\n        let ct = response.headers.get('Content-Type')\n        if (ct && (ct.match(/application\\/json/i) || ct.match(/text\\//i))) {\n          // There is a .json() instead of .text() but\n          // we're going to store it in sessionStorage as\n          // string anyway.\n          // If we don't clone the response, it will be\n          // consumed by the time it's returned. This\n          // way we're being un-intrusive.\n          response.clone().text().then(content => {\n            sessionStorage.setItem(cacheKey, content)\n          })\n        }\n        return response\n      })\n    }\n\n\n    cachedFetch('https://api.alquran.cloud/v1/ayah/' + filter + '/editions/' + q_editions)\n      .then(res => res.json())\n      .then((data) => {\n        //console.log(data.data[0]);\n        this.setState({\n          selectedSurah: data.data[0].surah,\n          selSurahNumber: data.data[0].surah.number,\n          inputVal: data.data[0].numberInSurah,\n          searchError: '',\n          rawData: data\n        }, () => this.processData(data));\n      })\n      .catch(\n      this.setState({\n        searchError: 'data error'\n      })\n      )\n\n  }\n\n  // -- select the translation from drop down\n  selectTranslation(trans) {\n    console.log(trans);\n\n    let refreshData = false;\n    if (this.state.defaultTrans) {\n      if (trans) {\n        if (this.state.defaultTrans.code !== trans.code) {\n          refreshData = true;\n        }\n      } else {\n        refreshData = true;\n      }\n    } else {\n      if (trans) {\n        refreshData = true;\n      }\n    }\n    if (refreshData) {\n      this.setState({\n        defaultTrans: trans\n      }, () => this.processData(this.state.rawData));\n    }\n  }\n\n  // -- process the data retreived from ayah api - the main result \n  processData(results) {\n    let res = [];\n    let audio = '';\n    let details = null;\n    let result = this.state.rawData;\n    let verseShowing = [];\n\n    if (!result || !result.data) {\n      console.log('no data');\n      return false;\n    }\n\n    result.data.map(item => {\n      let filteredItem = null;\n      var flag = false;\n      /* separate audio details */\n      if (!item.audio) {\n\n        filteredItem = { 'edition': item.edition, 'text': item.text };\n\n        if (item.edition.language === 'ar') {\n          flag = true;\n\n        } else {\n          if (this.state.defaultTrans) {\n            if (item.edition.language === this.state.defaultTrans.code) {\n              flag = true;\n            }\n          }\n        }\n\n        if (flag) {\n          verseShowing.push(item.text + \"\\n[Qur'an - \" + this.state.selSurahNumber + ':' + this.state.inputVal + ']\\n---');\n          res.push(filteredItem);\n        }\n        //flag = true;\n      }\n      else {\n        if (audio === '') {\n          audio = item.audio;\n        }\n      }\n\n      if (!details) {\n\n        details = item.surah;\n\n        details = Object.assign(details, {\n          'hizbQuarter': item.hizbQuarter,\n          'juz': item.juz,\n          'manzil': item.manzil,\n          'ayahNumber': item.number,\n          'numberInSurah': item.numberInSurah,\n          'page': item.page,\n          'ruku': item.ruku,\n          'sajda': item.sajda\n        });\n      }\n      return true;\n    }\n    )\n\n    if (audio) {\n      details = Object.assign(details, { 'audio': audio });\n    }\n    this.setState({\n      ayahDetails: details,\n      mainResult: res,\n      preloader: false,\n      versesNowShowing: verseShowing\n    }, () => (console.log(this.state.versesNowShowing)));\n\n    return true;\n  }\n\n  // -- update the user input \n  updateInputVal(evt) {\n    let value = evt.target.value;\n    let isValid = this.validateInput(value);\n    let navBackClass = this.state.navBtnClass.back;\n    let navNextClass = this.state.navBtnClass.next;\n    let searchBtn;\n\n    if (isValid) {\n      this.setState({\n        inputVal: evt.target.value\n      });\n    }\n\n    if (!Number(value)) {\n      searchBtn = 'search-btn inactive';\n    } else {\n      searchBtn = 'search-btn';\n    }\n    if (value <= 1) {\n      navNextClass = 'nav-btn next';\n      navBackClass = 'nav-btn back disabled';\n    } else {\n      navBackClass = 'nav-btn back';\n      if (this.state.selSurahNumber > 0 && value === this.state.selectedSurah.numberOfAyahs) {\n        navNextClass = 'nav-btn next disabled';\n      } else {\n        navNextClass = 'nav-btn next';\n      }\n    }\n    this.setState({\n      searchBtnClass: searchBtn,\n      navBtnClass: {\n        back: navBackClass,\n        next: navNextClass\n      }\n    })\n\n  }\n\n  // -- verify key pressed in ayah input field\n  verifyInputKey(evt) {\n    //console.log('asdf');\n    if (evt.keyCode === 186) {\n      this.setState({\n        selSurahNumber: evt.target.value,\n        inputVal: ''\n      }, () => this.fetchSurahDetails(Number(this.state.selSurahNumber)));\n    }\n  }\n\n  // --- select surah from popup \n  selectSurah = (evt) => {\n    //console.log(evt.target.value || evt.target.getAttribute('data-value'));\n    let dataVal = evt.target.value || evt.target.getAttribute('data-value');\n    this.getSurahDetails(dataVal);\n  }\n\n  // -- get surah details initiate \n  getSurahDetails(dataVal) {\n    if (dataVal > 0 && dataVal <= 114) {\n      this.setState({\n        preloader: true,\n        selSurahNumber: dataVal,\n        selectedSurah: this.fetchSurahDetails(Number(dataVal))\n      }, () => this.getAyahFromUrl());\n    } else {\n      console.log('Error: Surah Number Invalid!');\n    }\n\n  }\n\n  // --- get ayah input from url string\n  getAyahFromUrl() {\n    console.log(this.state.selectedSurah);\n    let totAyahsInSurah = this.state.selectedSurah.numberOfAyahs;\n    let search_string = this.state.url_search;\n\n    console.log(search_string);\n\n    let ayah = undefined;\n    \n    if (search_string.split(':').length >= 2 && Number(search_string.split(':')[1])) {\n      console.log(Number('') ? true : false);\n      if (this.validateInput(search_string.split(':')[1])) {\n        ayah = search_string.split(':')[1];\n        this.setState({\n          // selSurahNumber: sur,\n          preloader: true,\n          inputVal: ayah,\n        }, () => this.searchForAyah());\n      } else {\n        this.setState({\n          // selSurahNumber: sur,\n          preloader: false\n        });\n        console.log('Error: Ayah Number Invalid!');\n      }\n    } else {\n      this.setState({\n          // selSurahNumber: sur,\n          preloader: true,\n          inputVal: '1',\n        }, () => this.searchForAyah());\n      console.log('Showing up first Ayah!');\n    }\n    // else -  no search_string in url\n    if (!ayah || ayah === undefined) {\n      this.setState({\n        ayahDetails: {},\n        mainResult: [],\n        preloader: false\n      }, () => this.ayahInput.focus());\n    }\n\n  }\n\n  // fetch surah details from api\n  fetchSurahDetails(dataVal) {\n    let selSurah = undefined; // [];\n    // let temp;\n    if (this.state.surahList && this.state.surahList.length) {\n      selSurah = this.state.surahList.filter(surah => Number(surah.number) === Number(dataVal))[0];\n      // selSurah = temp[0];\n      /* this.setState({\n        selectedSurah: selSurah[0],\n        selSurahNumber: selSurah[0].number\n      }, () => {console.log(this.state.selectedSurah)});*/\n    } else {\n      console.log('Error: Surah List not available!');\n    }\n\n    // console.log(this.state.selectedSurah);\n\n\n    return selSurah;\n\n  }\n\n  // get the language name n details from Langs.json\n  findLang = (array, title) => {\n    let result = array.filter(item => item.code === title);\n    if (result.length) {\n      return result[0];\n    } else {\n      return false;\n    }\n  }\n\n  // navigate to next & previsous ayahs \n  navigateAyah = (evt) => {\n    let data = evt.target.getAttribute('data-value');\n    let valNow = Number(this.state.inputVal);\n    let totAyahs = Number(this.state.selectedSurah.numberOfAyahs);\n    let navBackClass = this.state.navBtnClass.back;\n    let navNextClass = this.state.navBtnClass.next;\n    switch (data) {\n      case \"back\":\n        if (valNow > 1) {\n          valNow--;\n        }\n        break;\n      case \"next\":\n        if (valNow < totAyahs) {\n          valNow++;\n        }\n        break;\n\n      default:\n    }\n    if (valNow === 1) {\n      navNextClass = 'nav-btn next';\n      navBackClass = 'nav-btn back disabled';\n    } else {\n      navBackClass = 'nav-btn back';\n      if (this.state.selSurahNumber > 0 && valNow === this.state.selectedSurah.numberOfAyahs) {\n        navNextClass = 'nav-btn next disabled';\n      } else {\n        navNextClass = 'nav-btn next';\n      }\n    }\n    this.setState({\n      inputVal: String(valNow),\n      navBtnClass: { back: navBackClass, next: navNextClass }\n    }, () => this.searchForAyah(evt));\n\n  }\n\n  onChangeHandler(e){\n    this.setState({\n      filterInput: e.target.value,\n    })\n    let chapts = this.state.surahList;\n    console.log(e.target.value);\n    let temp = [];\n    var newArray = chapts.filter((d)=>{\n      //console.log(d);\n      temp = Object.values(d);\n      return temp.filter(item => String(item).substr(0, e.target.value.length) === e.target.value);\n      /*for (var prop in temp) {\n        console.log(prop);\n        //if (d.hasOwnProperty(prop)) {\n          // Do things here\n          console.log(prop.indexOf(e.target.value));\n          return prop.indexOf(e.target.value) !== -1    \n        //}\n      }*/\n      /*temp = Object.values(d);\n      console.log(temp);\n      return temp.indexOf(e.target.value) !== -1*/ \n    });\n    console.log(newArray)\n    //surahs = newArray;\n    /*this.setState({\n      users:newArray\n    })*/\n\n  }\n  render() {\n    let listview;\n    // url is 'https://www.example.com/user?id=123&type=4';\n\n    /*let default_trans = trans_conf.filter(item => item.active === '1');\n\n    if(default_trans.length){\n\n    }*/\n\n    if (this.state.mainResult.length) {\n      listview = <Listview\n        key={this.state.ayahDetails && this.state.number}\n        results={this.state.mainResult}\n        details={this.state.ayahDetails}\n        />\n    }\n    const surahs = this.state.surahList;\n    const selectedSurah = this.state.selectedSurah;\n    let share_url = '';\n    if (selectedSurah && this.state.inputVal) {\n      share_url = this.state.url_origin + '?' + selectedSurah.number + ':' + this.state.inputVal;\n      console.log(share_url);\n    }\n    const SharePopup = () => (\n      <Popup\n        trigger={<button value=\"Share\" className=\"share-button\">Share</button>}\n        on=\"click\"\n        position=\"center center\"\n        modal\n        closeOnEscape\n        closeOnDocumentClick\n        className=\"surah-popup\"\n        onRequestClose={() => {\n          this.setState({ modalIsOpen: false });\n        } }\n        >\n        <div className=\"popup-wrapper\">\n          <h3>Share this Ayah ({this.state.selSurahNumber}: {this.state.inputVal}) </h3>\n          <div className=\"share-content-wrapper\">\n            <label htmlFor=\"share-message\" >Message (optional) </label>\n            <textarea placeholder=\"Enter message, if any\" rows=\"4\" cols=\"38\" className=\"share-msg\" maxLength=\"120\" autofocus=\"autofocus\" />\n            <div className=\"row-flex share-actions\">\n              <p>Share this Ayah using: </p>\n              <WhatsappShareButton\n                title=\"Q-search - Check out this Ayah\"\n                url={share_url}\n                seperator=\"<br />\"\n                className=\"social-btn\"\n                children=<WhatsappIcon size={30} round={false}/>\n                  />\n             \n                  <EmailShareButton\n                    subject=\"Q-search - Check out this Ayah\"\n                    body=\"body text goes here\"\n                    url={share_url}\n                    seperator=\"^\"\n                    openWindow=\"true\"\n                    className=\"social-btn\"\n                    children=<EmailIcon size={30} round={false}/>\n                      />\n            </div>\n            </div>\n          </div>\n      </Popup>\n        )\n\n        \n        /*const surahList = surahs\n        .filter(d => this.state.filterInput === '' || d.includes(this.state.filterInput))\n        .map((d, index) => <li key={index}>{d}</li>);*/\n\n        const SurahIndex = () => (\n\n          <div className=\"surahlist-container\">\n              <h3>Surah Index</h3>\n              {/*<input value={this.state.filterInput} type=\"text\" onChange={this.onChangeHandler.bind(this)}/>*/}\n              \n              <ul className=\"surah-list-ul\">\n                <li className=\"row-flex list-heads\">\n                  <p className=\"sayah\">Ayahs</p>\n                  <p className=\"sname\">Surah Name</p>\n                  <p className=\"sno\" >No.</p>\n                </li>\n                {\n                  //.filter(d => this.state.filterInput === '' || d.includes(this.state.filterInput))\n                  surahs\n                  .map(surah => <li  key={surah.number} value={surah.number} className=\"row-flex\" onClick={this.selectSurah}>\n\n                    <span data-value={surah.number} className=\"sno\">{surah.number}</span>\n                    <div className=\"surahname-wrapper\">\n                      <p data-value={surah.number} className=\"sname-ar\">{surah.name}</p>\n                      <p data-value={surah.number} className=\"sname\"><span className=\"blue-text\">{surah.englishNameTranslation}</span> | {surah.englishName}</p>\n                      <p data-value={surah.number} className=\"sname lighter\">Tap to select this Surah</p>\n                    </div>\n                    <span data-value={surah.number} className=\"sayah\">{surah.numberOfAyahs}</span>\n                    \n\n\n                  </li>)\n                }\n              </ul>\n            </div>\n        )\n        const SurahPopup =  () => (\n        <Popup\n          trigger={<button value=\"Surahs\" className=\"surah-button\">Surah</button>}\n          on=\"click\"\n          position=\"center center\"\n          modal\n          closeOnDocumentClick\n          className=\"surah-popup\"\n          onRequestClose={() => {\n            this.setState({ modalIsOpen: false });\n          } }\n          >\n          <div className=\"popup-wrapper\">\n            <h3>Select Surah: </h3>\n            <ul className=\"surah-list-ul\">\n              <li className=\"row-flex list-heads\">\n                <p className=\"sno\" >No.</p>\n                <p className=\"sname\">Surah Name</p>\n                <p className=\"sayah\">Ayahs</p>\n              </li>\n              {\n                surahs.map(surah => <li  key={surah.number} value={surah.number} className=\"row-flex\" onClick={this.selectSurah}>\n\n            \n                  <span data-value={surah.number} className=\"sayah\">{surah.numberOfAyahs}</span>\n                  <span data-value={surah.number} className=\"sname\">{surah.englishName}</span>\n                  <span data-value={surah.number} className=\"sno\">{surah.number}</span>\n                  \n\n                </li>)\n              }\n            </ul>\n          </div>\n        </Popup>\n        )\n\n\n        return (\n        <div className=\"page-wrapper\">\n          <header className=\"App-header\">\n            <h1 onClick={this.resetView}>\n              Q-Search\n            </h1>\n            {\n              /*(share_url !== '') &&\n              <SharePopup />*/\n            }\n          </header>\n          {\n            selectedSurah.number &&\n\n            <SurahInfo\n              details={this.state.ayahDetails}\n              onNavNext={this.navigateAyah}\n              onNavBack ={this.navigateAyah}\n              selectedSurah ={selectedSurah}\n              totalAyahs = {this.state.totalQuranAyahs}\n              navBackClass = {this.state.navBtnClass.back}\n              navNextClass = {this.state.navBtnClass.next}\n              inputVal = {this.state.inputVal}\n              refreshData = {this.processData}\n              selectedTrans = {this.state.defaultTrans}\n              selectTrans = {this.selectTranslation}\n              />\n          }\n          {\n            !selectedSurah.number &&\n            <SurahIndex />\n          }\n          <section className={this.state.searchBlockClass} id=\"search-block\">\n            <div className=\"row-flex ayah-input-wrapper\" >\n              <div className=\"row-flex surah-select-wrapper\" >\n                <div className=\"help-bubble left bottom\" onClick={(evt) => this.closeBubble} hidden >\n                  <p>Tap to select Surah here.</p>\n                </div>\n                { selectedSurah.number && \n                <SurahPopup />\n                }\n\n                {this.state.selSurahNumber > 0 &&\n                  <p ref={(sur) => { this.surahLabel = sur; } } className=\"surah-name\">{this.state.selSurahNumber}: </p>\n                }\n              </div>\n              <div className=\"ayah-input\">\n                <label hidden>Ayah Number: </label>\n                <input type=\"number\"\n                  value={this.state.inputVal}\n                  onChange={evt => this.updateInputVal(evt) }\n                  onKeyDown={evt => this.verifyInputKey(evt) }\n                  placeholder=\"Ayah No.\"\n                  ref={(input) => { this.ayahInput = input; } }\n                  className=\"input-ayah\"\n                  pattern=\"^[0-9]*$\"\n                  min=\"1\"\n                  max={this.state.selectedSurah.numberOfAyahs}\n                  />\n\n                <label ref={(sur) => { this.surahLabel = sur; } } className=\"ayah-total\">of {this.state.selectedSurah.numberOfAyahs ? this.state.selectedSurah.numberOfAyahs : 6236 }</label>\n\n              </div>\n              <button onClick={this.searchForAyah} className={this.state.searchBtnClass} value=\"Search\" >Search</button>\n            </div>\n          </section>\n          <div className='content-wrapper'>\n            {listview}\n\n          </div>\n\n          { this.state.preloader &&\n            <Loader />\n\n          }\n        </div>\n        );\n        }\n        }\n\n        export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}