{"version":3,"sources":["components/Listview/Listview.js","components/Loader/Loader.js","modules/SurahInfo/SurahInfo.js","App.js","serviceWorker.js","index.js"],"names":["getLangName","code","lang","Langs","filter","item","console","log","name","nativeName","Listview","props","results","details","react_default","a","createElement","className","List_default","component","disablePadding","dense","map","value","index","ListItem_default","key","ListItemText_default","edition","type","language","controls","src","audio","text","Loader","chkTrans","filteredLangs","popupStatus","selectedTrans","LangPopup","selectLangClass","showSelectLang","onClick","onChange","evt","target","lng","eng","mal","translations","english","malayalam","array","title","result","length","findLang","processData","selectLang","id","SurahInfo","navBack","onNavBack","selectedSurah","navNext","onNavNext","navNextClass","navBackClass","refreshData","inputVal","nextBtnText","backBtnClass","backBtnText","englishName","number","englishNameTranslation","SurahInfo_LangPopup","href","data-value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selectSurah","getAttribute","dataVal","setState","preloader","fetchSurahDetails","Number","state","langIsOpen","rawData","navigateAyah","data","valNow","totAyahs","numberOfAyahs","navBtnClass","back","next","selSurahNumber","String","searchForAyah","mainResult","ayahDetails","surahList","searchError","searchBlockClass","q_edition_ar","q_edition_trans","q_edition_audio","handleLoad","bind","assertThisInitialized","resetView","langPopupOnOpen","window","addEventListener","Surahs","isValid","event","_this2","q_editions","isRefValid","validateInput","split","url","options","cacheKey","cached","sessionStorage","getItem","response","Response","Blob","Promise","resolve","fetch","then","ct","headers","get","match","clone","content","setItem","cachedFetch","res","json","catch","_this3","filteredItem","flag","push","surah","assign","hizbQuarter","juz","manzil","ayahNumber","numberInSurah","page","ruku","sajda","_this4","keyCode","_this5","selSurah","ayahInput","focus","listview","_this6","components_Listview_Listview","surahs","queryString","require","SurahInfo_SurahInfo","langPopupOpen","onSelectLang","selectedLang","reactjs_popup_es","trigger","on","position","modal","closeOnDocumentClick","onRequestClose","modalIsOpen","ref","sur","surahLabel","hidden","updateInputVal","onKeyDown","verifyInputKey","placeholder","input","pattern","min","max","role","components_Loader_Loader","React","Component","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.369b6e42.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Langs from '../../assets/json/langs.json';\nimport './Listview.scss';\n\n//import Box from '@material-ui/core/Box';\n/*import ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';*/\n//import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n/*import { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';*/\n//import Modal from '@material-ui/core/Modal';\n//import Popup from \"reactjs-popup\";\n//import IconButton from '@material-ui/core/IconButton';\n//import CommentIcon from '@material-ui/icons/Comment';\n//import Slide from '@material-ui/core/Slide';\n//import Copier from '../../modules/Copier/Copier';\n\n  const getLangName = (code) => {\n    // function to get the language name from code\n    let lang = Langs.filter(item => item.code === code);\n    console.log(lang);\n    return (lang[0].name !== 'English' ? lang[0].name + ' | ' + lang[0].nativeName : lang[0].name);\n  }\n\n  function Listview(props) {\n    \n    const results = props.results;\n    const details = props.details;\n\n    if(!props.results) return null;\n\n    return (\n      <div className=\"listview-wrapper\">\n        <List component='ul' disablePadding={false} dense={false} className=\"verse-list-ul\">\n          {results.map((value, index) =>\n            <ListItem key={index} className=\"no-padding\">\n              <ListItemText className=\"verse-text\" >\n              { value.edition.type === 'translation' &&\n                <span className=\"ayah-details\">{getLangName(value.edition.language)}</span>\n              }\n\n              { value.edition.language === 'ar' && \n                <audio controls=\"controls\" className=\"q-audio-player\">\n                  <source src={details.audio} type=\"audio/wav\" />\n                  Your browser does not support the <code>audio</code> element. \n                </audio>\n              }\n              <p className={value.edition.language === 'ar'? \"txt-arabic\" :''}>{value.text}</p>\n                \n            </ListItemText>\n          </ListItem>\n          )\n        }\n        </List>\n      </div>\n    )\n  }\n    \nexport default Listview","import React from 'react';\nimport './Loader.scss';\n\nfunction Loader() {\n  return <div className=\"loader-wrapper\">\n    <p>Loading...</p>\n  </div>;\n}\n\nexport default Loader;","import React from 'react';\r\n\r\nimport Langs from '../../assets/json/langs.json';\r\n//import Popup from \"reactjs-popup\";\r\n\r\nconst chkTrans = {'english': false, 'malayalam' : false};\r\nconst filteredLangs = Langs.filter(item => item.code === 'en' || item.code === 'ml' );\r\nlet popupStatus = false ;\r\nlet selectedTrans = '';\r\nlet findLang = (array, title) => {\r\n    let result = array.filter(item => item.code === title );\r\n    if(result.length){\r\n    return result[0];\r\n    } else {\r\n    return false;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst LangPopup =  (props) => {\r\n    console.log(props);\r\n    let selectLangClass = 'hide';\r\n\r\n    let selectLang = evt => {\r\n        //const refreshData = props.refreshData;\r\n        console.log(evt.target);\r\n        let lng = evt.target.value; //getAttribute('data-value');\r\n        let eng = chkTrans.english;\r\n        let mal = chkTrans.malayalam;\r\n        switch (lng){\r\n        case 'en':\r\n            eng = true; //!eng;\r\n            mal = false;\r\n            \r\n            break;\r\n        case 'ml':\r\n            mal = true; //!mal;\r\n            eng = false;\r\n            break;\r\n        default:\r\n        }\r\n        //this.setState({\r\n        props.translations.english = eng;\r\n        props.translations.malayalam = mal; \r\n        popupStatus = false;\r\n        //setPopupStatus(false);\r\n        \r\n        selectedTrans = findLang(Langs,lng);\r\n        props.processData();\r\n        selectLangClass = 'hide';\r\n        console.log(popupStatus);\r\n    }\r\n\r\n      let showSelectLang = () => {\r\n          selectLangClass = 'show';\r\n      }\r\n\r\n      return  <div className='lang-select'>\r\n        <section className='select-value-wrapper'>\r\n            <label onClick={showSelectLang}>Translation: <span>{selectedTrans.nativeName}</span></label>\r\n        </section>\r\n        <select onChange={evt => selectLang(evt)} id='q-lang' className={selectLangClass} onClick={showSelectLang}>\r\n            <option value=\"denied\">None</option>\r\n            {\r\n                filteredLangs.map(lng=> \r\n                    <option value={lng.code} key={lng.code}>{lng.name} - {lng.nativeName}</option>\r\n                )\r\n            }\r\n        \r\n        </select>\r\n       \r\n    </div>\r\n      \r\n}\r\n\r\nfunction SurahInfo (props) {\r\n    //const details = props.details;\r\n    const navBack = props.onNavBack;\r\n    const selectedSurah = props.selectedSurah;\r\n    //const transSelected = props.selectedLang;\r\n    const navNext = props.onNavNext;\r\n    const navNextClass = props.navNextClass;\r\n    const navBackClass = props.navBackClass;\r\n    const refreshData = props.refreshData;\r\n\r\n    //const langPopupOpen = props.langPopupOpen;\r\n    //const onLangChange = props.onSelectLang;\r\n    const chkTrans = props.translations;\r\n    const inputVal = props.inputVal;\r\n    //const onPopupOpen = props.langPopupOnOpen;\r\n\r\n    var nextBtnText = 'Next';\r\n    var backBtnClass = navBackClass;\r\n    var backBtnText = 'Back';\r\n\r\n    //const filteredLangs = Langs.filter(item => item.code === 'en' || item.code === 'ml' );\r\n\r\n    if(!inputVal){\r\n        nextBtnText = 'First Ayah';\r\n        backBtnText = ' ';\r\n        backBtnClass += ' off';\r\n    }\r\n    \r\n    return(\r\n        <section className=\"titles-wrapper\">\r\n            <h2 className=\"surah-title\">{selectedSurah.englishName} | {selectedSurah.name}</h2>\r\n            <p>Surah: <span className=\"clearer\">{selectedSurah.number}</span> | {selectedSurah.englishNameTranslation}</p>\r\n            \r\n            <LangPopup \r\n                processData={refreshData} \r\n                translations={chkTrans} \r\n            />\r\n\r\n            <div className=\"row-flex ayah-nav-wrapper margin top\">\r\n                <a href=\"javascript:;\" \r\n                    className={backBtnClass} \r\n                    data-value=\"back\" \r\n                    onClick={navBack}\r\n                >\r\n                    {backBtnText}\r\n                </a>\r\n                    <p>Ayah: <span className=\"clearer\">{inputVal ? inputVal : '---'}</span></p>\r\n                <a href=\"javascript:;\" \r\n                    className={navNextClass} \r\n                    data-value=\"next\" \r\n                    onClick={navNext}\r\n                >\r\n                    {nextBtnText}\r\n                </a>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default SurahInfo;","\nimport React from 'react';\n//import logo from './logo.svg';\nimport './App.scss';\nimport 'typeface-roboto';\n//import TextField from '@material-ui/core/TextField';\n\n//import PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\n//import AppBar from '@material-ui/core/AppBar';\n//import Toolbar from '@material-ui/core/Toolbar';\n//import Popover from '@material-ui/core/Popover';\n\n//import Typography from '@material-ui/core/Typography';\n\n//import Button from '@material-ui/core/Button';\n//import Tabs from '@material-ui/core/Tabs';\n//import Tab from '@material-ui/core/Tab';\n\n//import FormGroup from '@material-ui/core/FormGroup';\n//import FormControlLabel from '@material-ui/core/FormControlLabel';\n//import Checkbox from '@material-ui/core/Checkbox';\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n//import Favorite from '@material-ui/icons/Favorite';\n//import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nimport Listview from './components/Listview/Listview';\nimport Loader from './components/Loader/Loader';\nimport Langs from './assets/json/langs.json';\nimport Surahs from './assets/json/SurahList.json';\nimport Popup from \"reactjs-popup\";\nimport SurahInfo from './modules/SurahInfo/SurahInfo';\n\n//import Checkbox from './components/Checkbox/Checkbox';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        mainResult: [],\n        inputVal: '',\n        ayahDetails: {},\n        rawData: {},\n        surahList: [],\n        searchError: '',\n        searchBlockClass: 'search-wrapper',\n        selectedSurah: {},\n        selSurahNumber: 0,\n        selectedTrans: '',\n        preloader: true,\n        langIsOpen: false,\n        chkTrans: {'english': false, 'malayalam' : false},\n        q_edition_ar: 'quran-simple-enhanced',\n        q_edition_trans: ['en.asad', 'en.pickthall', 'ml.abdulhameed'],\n        q_edition_audio: 'ar.alafasy',\n        navBtnClass: {'back':'nav-btn back', 'next':'nav-btn next'}\n      }\n      //const langs = JSON.parse('./langs.json');\n      this.handleLoad = this.handleLoad.bind(this);\n      this.processData = this.processData.bind(this);\n      this.resetView = this.resetView.bind(this);\n      this.searchForAyah = this.searchForAyah.bind(this);\n      this.langPopupOnOpen = this.langPopupOnOpen.bind(this);\n    }\n    \n    \n    resetView() {\n      //alert('asdf');\n      this.setState({\n        inputVal: '',\n        ayahDetails: null,\n        mainResult: [],\n        rawData: null,\n        searchError: '',\n        selectedSurah: {},\n        selSurahNumber: 0,\n        langIsOpen: false,\n        selectedTrans: '',\n        chkTrans: {'english': false, 'malayalam' : false}\n      })\n    }\n    componentDidMount() {\n      window.addEventListener('load', this.handleLoad);\n    }\n    \n    \n    handleLoad(){\n      //console.log(Langs);\n      this.setState({\n         preloader: true\n      });\n      \n       this.setState({\n          surahList: Surahs.data,\n          preloader: false\n        });\n\n     \n    }\n\n    langPopupOnOpen(){\n      this.setState({\n        langIsOpen: true\n      })\n    }\n\n    validateInput(value){\n      //console.log(value);\n      //let selSurah = this.state.selectedSurah;\n      //let errMsg = '';\n      let isValid = true;\n      let totAyahs;\n      console.log(value);\n      if(this.state.selectedSurah.number){\n        totAyahs = Number(this.state.selectedSurah.numberOfAyahs);\n      }\n      else {\n        totAyahs = 6236;\n      }\n      \n      if(value > totAyahs){\n        isValid = false;\n      }\n      console.log(value);\n      return isValid;\n    }\n\n    searchForAyah(event) {\n     \n      //console.log(this.state.preloader);\n      let filter = Number(this.state.inputVal);\n      let q_editions = (this.state.q_edition_ar + ',' + this.state.q_edition_trans + ',' + this.state.q_edition_audio) ;\n      this.setState({\n         preloader: true\n        });\n\n      let isRefValid = this.validateInput(filter);\n    \n      if(!filter || !isRefValid){\n        console.log(this.state.searchError);\n        this.setState({\n         preloader: false\n        });\n        return false;\n      }\n\n      if(String(filter).split(':').length <= 1){\n        if(this.state.selSurahNumber > 0){\n          filter = this.state.selSurahNumber + \":\" + filter;\n        } \n      } \n\n      \n     \n      const cachedFetch = (url, options) => {\n        // Use the URL as the cache key to sessionStorage\n      let cacheKey = url\n      // START new cache HIT code\n      let cached = sessionStorage.getItem(cacheKey)\n      if (cached !== null) {\n        // it was in sessionStorage! Yay!\n        console.log('already cached')\n        let response = new Response(new Blob([cached]));\n        return Promise.resolve(response);\n      }\n      // END new cache HIT code\n      return fetch(url, options).then(response => {\n        // let's only store in cache if the content-type is\n        // JSON or something non-binary\n        let ct = response.headers.get('Content-Type')\n        if (ct && (ct.match(/application\\/json/i) || ct.match(/text\\//i))) {\n          // There is a .json() instead of .text() but\n          // we're going to store it in sessionStorage as\n          // string anyway.\n          // If we don't clone the response, it will be\n          // consumed by the time it's returned. This\n          // way we're being un-intrusive.\n          response.clone().text().then(content => {\n            sessionStorage.setItem(cacheKey, content)\n          })\n        }\n        return response\n        })\n      }\n\n      this.setState({\n         preloader: true\n      }, () => {\n        cachedFetch('https://api.alquran.cloud/v1/ayah/' + filter + '/editions/' + q_editions)\n          .then(res => res.json())\n          .then((data) => {\n            console.log(this.state.preloader);\n            console.log('done...');\n            this.setState({\n              searchError:'',\n              rawData :data\n            }, () => this.processData(data));\n          })\n          .catch(\n            this.setState({\n             preloader: false,\n             searchError: 'data error'\n            })\n          )\n        }\n      );\n    }\n    \n    /*getErrMessage(src) {\n      let message = '';\n      //let inp = this.state.inputVal;\n      let splitV = this.state.inputVal.split(':');\n      let curSurah = this.state.selectedSurah;\n      if(src === 'list'){\n        message = 'Surah list data error';\n      } else {\n        if(splitV.length > 1){\n          if(Number(splitV[0]) > 114 || Number(splitV[0]) < 1){\n            message = 'Invalid Surah reference';\n          } else {\n            if(curSurah && (Number(splitV[1]) < 1 || Number(splitV[1]) > Number(curSurah.numberOfAyahs))){\n              message = 'Invalid Ayah number. Enter Ayah 1 through ' + curSurah.numberOfAyahs;\n            } else {\n              message = ''\n            }\n          }\n        } else {\n          if(Number(splitV[0]) < 1 || Number(splitV[0]) > 60232){\n            message = 'Invalid Ayah number. Enter any from 1 to 60232';\n          } else {\n            message = '';\n          }\n        }\n      }\n      return message;\n      \n    }*/\n    \n     processData(results) {\n      let res = [];\n      let audio = '';\n      let details = null;\n      let result = this.state.rawData;\n\n      /*this.setState({ \n        ayahDetails: {},\n        mainResult: [],\n        preloader: true\n      });*/\n      \n      if(!result || !result.data){\n        console.log('no data');\n        return false;\n      }\n      \n        result.data.map(item => {\n            let filteredItem = null;\n            var flag = true;\n            /* separate audio details */\n            if(!item.audio){\n              \n              filteredItem = {'edition': item.edition, 'text': item.text};\n              switch(item.edition.language){\n                case 'en':\n                  flag = this.state.chkTrans.english;\n                  break;\n                case 'ml':\n                  flag = this.state.chkTrans.malayalam;\n                  break;\n                default:\n                  flag = true;\n                  \n              }\n              if(flag){\n                res.push(filteredItem);\n              }\n              flag = true;\n            }\n            else{\n              if(audio === ''){\n                audio = item.audio;\n              }\n            }\n            \n            if(!details){\n\n              details = item.surah;\n              \n              details = Object.assign(details, {\n                'hizbQuarter': item.hizbQuarter,\n                'juz': item.juz,  \n                'manzil': item.manzil,\n                'ayahNumber': item.number,\n                'numberInSurah': item.numberInSurah,\n                'page': item.page,\n                'ruku': item.ruku,\n                'sajda': item.sajda\n              });\n            }\n            return true;\n          }\n        )\n        \n        if(audio){\n          details = Object.assign(details, {'audio': audio});\n        }\n        this.setState({ \n          ayahDetails: details, \n          mainResult: res, \n          preloader: false\n        });\n       \n        \n        return true;\n      \n    }\n    \n    updateInputVal(evt) {\n      let value = evt.target.value;\n      let isValid = this.validateInput(value);\n      let navBackClass = this.state.navBtnClass.back;\n      let navNextClass = this.state.navBtnClass.next; \n      //console.log(evt.target.value);\n      if(isValid){\n        this.setState({\n          inputVal: evt.target.value\n        });\n      }\n      if(value <= 1){\n        navNextClass = 'nav-btn next';\n        navBackClass = 'nav-btn back disabled';\n      } else {\n        navBackClass = 'nav-btn back';\n        if(this.state.selSurahNumber > 0 && value === this.state.selectedSurah.numberOfAyahs){\n          navNextClass = 'nav-btn next disabled';\n        } else {\n          navNextClass = 'nav-btn next';\n        }\n      }\n      this.setState({\n        navBtnClass: {\n          back: navBackClass,\n          next: navNextClass\n        }\n      })\n\n    }\n    verifyInputKey(evt) {\n      if(evt.keyCode === 186) { // || evt.keyCode === 189){\n        this.setState({\n          selSurahNumber: evt.target.value,\n          inputVal: '', \n          preloader: true\n        },() => this.fetchSurahDetails(Number(this.state.selSurahNumber)));\n      }\n    }\n\n    selectSurah = (evt) => {\n      console.log(evt.target.value || evt.target.getAttribute('data-value'));\n      let dataVal = evt.target.value || evt.target.getAttribute('data-value');\n      this.setState({\n        preloader: true\n      }, () => this.fetchSurahDetails(Number(dataVal)));\n    }\n    fetchSurahDetails(dataVal){\n      let selSurah = [];\n      if(dataVal > 0){\n        selSurah = this.state.surahList.filter(surah => Number(surah.number) === Number(dataVal));\n        \n        this.setState({\n          selectedSurah: selSurah[0],\n          selSurahNumber: selSurah[0].number\n        }, () => {console.log(this.state.selectedSurah)});\n      }\n      \n      \n      this.setState({ \n        ayahDetails: {},\n        mainResult: [], \n        preloader: false\n      }, () => {this.ayahInput.focus()});\n      \n    }\n    \n    selectLang = evt => {\n      console.log(evt.target.getAttribute('data-value'));\n      \n      let lng = evt.target.getAttribute('data-value');\n      let eng = this.state.chkTrans.english;\n      let mal = this.state.chkTrans.malayalam;\n      switch (lng){\n        case 'en':\n          eng = true; //!eng;\n          mal = false;\n          break;\n        case 'ml':\n          mal = true; //!mal;\n          eng = false;\n          break;\n        default:\n      }\n      this.setState({\n        chkTrans:{\n          english: eng,\n          malayalam: mal\n        },\n        selectedTrans: this.findLang(Langs, lng),\n        langIsOpen: false\n      }, () => {\n          this.processData(this.state.rawData);\n      });\n      \n    } \n    \n    \n\nfindLang(array, title) {\n//console.log('find');\n  \n      let result = array.filter(item => item.code === title );\n      if(result.length){\n        return result[0];\n      } else {\n        return false;\n      }\n}\n\nnavigateAyah = (evt) => {\n  //console.log(evt.target.getAttribute('data-value'));\n  let data = evt.target.getAttribute('data-value');\n  let valNow = Number(this.state.inputVal);\n  let totAyahs = Number(this.state.selectedSurah.numberOfAyahs); \n  let navBackClass = this.state.navBtnClass.back;\n  let navNextClass = this.state.navBtnClass.next; \n  switch (data){\n    case \"back\":  \n      if(valNow > 1) {\n       // navBackClass = 'nav-btn back'; \n        valNow--;\n      }\n      break;\n    case \"next\":\n      if(valNow < totAyahs) {\n        //navNextClass = 'nav-btn next';\n        valNow++;\n      }\n      break;\n      \n    default:\n  }\n   if(valNow === 1){\n      navNextClass = 'nav-btn next';\n      navBackClass = 'nav-btn back disabled';\n    } else {\n      navBackClass = 'nav-btn back';\n      if(this.state.selSurahNumber > 0 && valNow === this.state.selectedSurah.numberOfAyahs){\n        navNextClass = 'nav-btn next disabled';\n      } else {\n        navNextClass = 'nav-btn next';\n      }\n    }\n  this.setState({\n    inputVal: String(valNow),\n    navBtnClass: {back: navBackClass, next: navNextClass},\n  }, () => this.searchForAyah(evt));\n  \n}\n  render(){\n    \n    /* <select id=\"surah-list\" onChange={evt => this.changeSurah(evt)} className=\"surah-select\">\n      <option value=\"0\" >--Select--</option>\n      { \n        surahs.map(el => <option value={el.number} key={el.number} > {el.number} - {el.englishName} </option>)\n      }\n    </select>\n    \n    <button className=\"toggle-btn\" value=\"malayalam\" onClick={this.chkSelectChange}>Mal</button>\n    */\n    let listview;\n\n    //console.log(this.langs);\n    if(this.state.mainResult.length){\n      listview = <Listview \n        key={this.state.ayahDetails && this.state.number} \n        results={this.state.mainResult} \n        details={this.state.ayahDetails}\n        />\n    }\n    //console.log(this.findLang(Langs, 'ml'));\n    //let surah = {};\n    const surahs = this.state.surahList;\n    //const filteredLangs = Langs.filter(item => item.code === 'en' || item.code === 'ml' );\n    //const chapters = Surahs.data;\n    //console.log(chapters);\n    //console.log(langs);\n   /*let selectedTrans = () => {\n    let selection = ''\n    if(this.state.chkTrans.english){\n      selection = 'English';\n    } else {\n      if(this.state.chkTrans.malayalam){\n        selection = 'Malayalam';\n      } else {\n        selection = 'None';\n      }\n    }\n    this.setState({\n      selectedTrans: selection\n    })\n    return selection;\n   }*/\n    \n    /*const LangPopup =  () => (\n      <Popup\n        trigger={<a href=\"javascript:;\" className=\"toggle-btn align-self-center margin top\" value=\"Translation\" >Translation: {selectedTrans} </a>}\n        on=\"click\"\n        position=\"center center\"\n        modal\n        closeOnDocumentClick\n      >\n      <div className=\"surah-wrapper\">\n        <h3>Select Language:</h3>\n        <ul>\n        {\n          filteredLangs.map(lng=> \n            <li \n            data-value={lng.code} \n            key={lng.code} \n            onClick={this.selectLang} >{lng.code} - {lng.name} </li>\n          )\n        }\n        </ul>\n      </div>\n      </Popup>\n    )*/\n\n        \n    const SurahPopup =  () => (\n      <Popup\n        trigger={<a href=\"javascript:;\" value=\"Surahs\" className=\"surah-button\">Surah</a>}\n        on=\"click\"\n        position=\"center center\"\n        modal\n        closeOnDocumentClick\n        className=\"surah-popup\"\n        onRequestClose={() => {\n          this.setState({ modalIsOpen: false });\n        }}\n      >\n      <div className=\"surah-wrapper\">\n        <h3>Select Surah:</h3>\n        <ul className=\"surah-list-ul\">\n          <li className=\"row-flex list-heads\">\n            <p className=\"sno\" >No.</p>\n            <p className=\"sname\">Surah Name</p>\n            <p className=\"sayah\">Ayahs</p>\n          </li>\n        {\n          surahs.map(surah => <li  key={surah.number} value={surah.number} className=\"row-flex\" onClick={this.selectSurah}>\n          \n            <span data-value={surah.number} className=\"sno\">{surah.number}</span>\n            <span data-value={surah.number} className=\"sname\">{surah.englishName}</span>\n            <span data-value={surah.number} className=\"sayah\">{surah.numberOfAyahs}</span>\n          \n          </li>)\n        }\n        </ul>\n      </div>\n      </Popup>\n    \n    )\n          \n    /*<label htmlFor=\"surah-list\">Surah:</label>\n      <AppBar position=\"static\" color=\"default\">\n      <Toolbar>\n        <Typography variant=\"h1\" size=\"small\" color=\"inherit\">\n          Q-Search\n        </Typography>\n      </Toolbar>\n    </AppBar>\n\n    <section className=\"titles-wrapper\">\n        \n          <h2 className=\"surah-title\">{selectedSurah.englishName} | {selectedSurah.name}</h2>\n          <p>Surah: <span className=\"clearer\">{selectedSurah.number}</span> | {selectedSurah.englishNameTranslation}</p>\n          <LangPopup />\n          <div className=\"row-flex ayah-nav-wrapper margin top\">\n            <a href=\"javascript:;\" className={this.state.navBtnClass.back} data-value=\"back\" onClick={this.navigateAyah}>Back</a>\n              <p>Ayah: <span className=\"clearer\">{this.state.inputVal ? this.state.inputVal : 'Not Selected'}</span></p>\n            <a href=\"javascript:;\" className={this.state.navBtnClass.next} data-value=\"next\" onClick={evt => this.navigateAyah(evt)}>Next</a>\n           </div>\n      </section>\n    */\n    const selectedSurah = this.state.selectedSurah;\n   //alert(this.state.selectedTrans);\n   const queryString = require('query-string');\n//var location = this.location;\nconsole.log(queryString);\n//console.log(queryString.parse(location.search));\n  return (\n    <div className=\"page-wrapper\">\n      <header className=\"App-header\">\n       <h1 onClick={this.resetView}>\n          Q-Search\n       </h1>\n      </header>\n      {\n        selectedSurah.number && \n\n        <SurahInfo \n          details={this.state.ayahDetails} \n          onNavNext={this.navigateAyah} \n          onNavBack ={this.navigateAyah} \n          selectedSurah ={selectedSurah}\n          navBackClass = {this.state.navBtnClass.back}\n          navNextClass = {this.state.navBtnClass.next}\n          langPopupOpen = {this.state.langIsOpen}\n          onSelectLang = {this.selectLang}\n          selectedLang = {this.state.selectedTrans}\n          translations = {this.state.chkTrans}\n          inputVal = {this.state.inputVal}\n          langPopupOnOpen = {this.langPopupOnOpen}\n          refreshData = {this.processData}\n          />\n      }\n      \n      \n        <section className={this.state.searchBlockClass} id=\"search-block\">\n        <div className=\"row-flex ayah-input-wrapper\" >\n          <div className=\"row-flex\">\n            \n            <SurahPopup />\n            <div className=\"triangle-right\"><div className=\"inner\"></div></div>\n            {this.state.selSurahNumber > 0 && \n              <p ref={(sur) => { this.surahLabel = sur; }} className=\"surah-name\">{this.state.selSurahNumber}:</p>\n            }\n          </div>\n          <div className=\"ayah-input\">\n            <label hidden>Ayah Number:</label>\n            <input type=\"number\"\n              value={this.state.inputVal}\n              onChange={evt =>this.updateInputVal(evt)}\n              onKeyDown={evt => this.verifyInputKey(evt)}\n              placeholder=\"Ayah No.\"\n              ref={(input) => { this.ayahInput = input; }} \n              className=\"input-ayah\"\n              pattern=\"^[0-9]*$\"\n              min=\"1\"\n              max={this.state.selectedSurah.numberOfAyahs}\n            />\n            {this.state.selectedSurah.englishName && \n              <label ref={(sur) => { this.surahLabel = sur; }} className=\"ayah-total\">of {this.state.selectedSurah.numberOfAyahs}</label>\n            }\n          </div>\n          <a href=\"javascript:;\" onClick={this.searchForAyah} role=\"button\" className=\"search-btn\">Search</a>\n          \n         </div> \n        \n          \n        </section>\n      <div className='content-wrapper'>\n        {listview}\n         \n      </div>\n      \n      { this.state.preloader && \n        <Loader />\n        \n      }\n     \n           \n    </div>\n    \n  );\n  }\n}\n//onChange={handleChange('checkedF')}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}