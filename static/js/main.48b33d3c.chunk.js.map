{"version":3,"sources":["components/Listview/Listview.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Listview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillUnmount","console","log","onClickNavigate","evt","curAyah","details","numberInSurah","surah","number","totAyah","numberOfAyahs","target","value","state","code","lang","Langs","filter","item","name","nativeName","_this2","results","react_default","a","createElement","className","hidden","onClick","List_default","component","disablePadding","dense","map","index","ListItem_default","key","ListItemText_default","edition","type","getLangName","language","controls","src","audio","text","React","Component","Loader","App","searchForAyah","event","setState","preloader","inputVal","q_editions","q_edition_ar","q_edition_trans","q_edition_audio","String","split","length","selectedSurah","searchError","fetch","then","res","json","data","rawData","searchBlockClass","processData","catch","updateInputVal","selectSurah","selSurah","surahList","Number","ayahDetails","mainResult","ayahInput","focus","selectLang","getAttribute","lng","eng","chkTrans","english","mal","malayalam","selectedTrans","handleLoad","bind","assertThisInitialized","resetView","window","addEventListener","sList","chapter","getErrMessage","_this3","splitV","curSurah","result","_this4","filteredItem","flag","push","assign","hizbQuarter","juz","manzil","ayahNumber","page","ruku","sajda","array","title","listview","_this5","components_Listview_Listview","surahs","filteredLangs","englishName","englishNameTranslation","reactjs_popup_es","trigger","href","on","position","modal","closeOnDocumentClick","data-value","id","ref","sur","surahLabel","onChange","placeholder","input","pattern","min","max","role","components_Loader_Loader","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48b33d3c.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\n//import Box from '@material-ui/core/Box';\nimport ListItem from '@material-ui/core/ListItem';\n/*import ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';*/\n//import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\n/*import { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';*/\n//import Modal from '@material-ui/core/Modal';\nimport Popup from \"reactjs-popup\";\nimport Langs from '../../langs.json';\n//import IconButton from '@material-ui/core/IconButton';\n//import CommentIcon from '@material-ui/icons/Comment';\n//import Slide from '@material-ui/core/Slide';\nimport './Listview.scss';\n\n//import Copier from '../../modules/Copier/Copier';\n\n  class Listview extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n      }\n    }\n    componentWillUnmount = () => {\n        console.log('asdf');\n    }\n    onClickNavigate = (evt) => {\n      let curAyah = this.props.details.numberInSurah;\n      let surah = this.props.details.number;\n      let totAyah = this.props.details.numberOfAyahs;\n      \n      \n      switch(evt.target.value){\n        case \"Next\":\n          if(curAyah < totAyah){\n            curAyah++;\n          } else {\n            if(surah < 114){\n              surah++;\n              curAyah = 1;\n            } else {\n              console.log('You are on the last Ayah of the last Surah');\n            }\n          }\n          console.log(surah + ':' + curAyah);\n          //curAyah = this.props.details.numberOfAyahs\n          break;\n        case \"Prev\":\n          if(curAyah > 1){\n            curAyah--;\n          } else {\n            if(surah > 1){\n              surah--;\n            } else {\n              console.log('You are on the first Ayah of the first Surah');\n            }\n          }\n          console.log(surah + ':' + curAyah);\n          break;\n        default:\n          console.log('asd');\n          break;\n      }\n    }\n     getLangName(code) {\n            let lang = Langs.filter(item => item.code === code);\n            console.log(lang);\n            return (lang[0].name !== 'English' ? lang[0].name + ' | ' + lang[0].nativeName : lang[0].name);\n          }\n    render () {\n      //console.log(this.props);\n      const results = this.props.results;\n      const details = this.props.details;\n      \n      if(!this.props.results) return null;\n      \n      //console.log(details);\n      const PopupOnFocus =  () => (\n        <Popup\n          trigger={<button value=\"More Info\">More Info</button>}\n          on=\"click\"\n          position=\"right center\"\n          closeOnDocumentClick\n        >\n        <div><center>\n          <h2>{details.name}</h2>\n          <p>{details.englishName} | {details.englishNameTranslation}</p>\n           <p>Surah: {details.number} | Ayah: {details.numberInSurah}</p>\n           \n          </center>\n        </div>\n        </Popup>\n      )\n      \n      \n      /*<ListItemSecondaryAction>\n            <IconButton hidden edge=\"end\" aria-label=\"Comments\">\n              \n            </IconButton>\n          \n          </ListItemSecondaryAction>\n          <p>Ref: <span>{details.number}:{details.numberInSurah}</span></p>\n        \n        <PopupOnFocus />\n          */\n         \n    return (\n      <div className=\"listview-wrapper\">\n      <button hidden onClick={this.onClickNavigate} value=\"Prev\" >prev</button>\n      \n      \n        <button hidden onClick={this.onClickNavigate} value=\"Next\" >next</button>\n        <List component='ul' disablePadding={false} dense={false} className=\"verse-list-ul\">\n          {results.map((value, index) =>\n            <ListItem key={index} className=\"no-padding\">\n              <ListItemText className=\"verse-text\" >\n              { value.edition.type === 'translation' &&\n                <span className=\"ayah-details\">{this.getLangName(value.edition.language)}</span>\n              }\n\n              { value.edition.language === 'ar' && \n                    \n                      <audio controls=\"controls\" className=\"q-audio-player\">\n                        <source src={details.audio} type=\"audio/wav\" />\n                        Your browser does not support the <code>audio</code> element. \n                      </audio>\n                  \n                  }\n                <p className={value.edition.language === 'ar'? \"txt-arabic\" :''}>{value.text}</p>\n                  \n              </ListItemText>\n            </ListItem>\n            )\n          }\n          \n        </List>\n        \n      </div>\n    )\n    }\n\n  }  ;\n \nexport default Listview","import React from 'react';\nimport './Loader.scss';\n\n\nfunction Loader() {\n  //const greeting = 'Hello Function Component!';\n\n  return <div className=\"loader-wrapper\">\n    <p>Loading...</p>\n  </div>;\n}\n\nexport default Loader;","\nimport React from 'react';\n//import logo from './logo.svg';\nimport './App.scss';\nimport 'typeface-roboto';\n//import TextField from '@material-ui/core/TextField';\n\n//import PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n//import Popover from '@material-ui/core/Popover';\n\nimport Typography from '@material-ui/core/Typography';\n\n//import Button from '@material-ui/core/Button';\n//import Tabs from '@material-ui/core/Tabs';\n//import Tab from '@material-ui/core/Tab';\n\n//import FormGroup from '@material-ui/core/FormGroup';\n//import FormControlLabel from '@material-ui/core/FormControlLabel';\n//import Checkbox from '@material-ui/core/Checkbox';\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n//import Favorite from '@material-ui/icons/Favorite';\n//import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nimport Listview from './components/Listview/Listview';\nimport Loader from './components/Loader/Loader';\nimport Langs from './langs.json';\nimport Popup from \"reactjs-popup\";\n//import Checkbox from './components/Checkbox/Checkbox';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        mainResult: [],\n        inputVal: '',\n        ayahDetails: {},\n        rawData: {},\n        surahList: [],\n        searchError: '',\n        searchBlockClass: 'search-wrapper',\n        selectedSurah: {},\n        selectedTrans: '',\n        preloader: true,\n        chkTrans: {'english': false, 'malayalam' : false},\n        q_edition_ar: 'quran-simple-enhanced',\n        q_edition_trans: ['en.asad', 'en.pickthall', 'ml.abdulhameed'],\n        q_edition_audio: 'ar.alafasy'\n      }\n      //const langs = JSON.parse('./langs.json');\n      this.handleLoad = this.handleLoad.bind(this);\n      //this.chkSelectChange = this.chkSelectChange.bind(this);\n      this.resetView = this.resetView.bind(this);\n      \n    }\n    \n    resetView() {\n      //alert('asdf');\n      this.setState({\n        ayahDetails: null,\n        mainResult: [],\n        rawData: null,\n        searchError: '',\n        selectedSurah: {},\n        selectedTrans: '',\n        preloader: false,\n        chkTrans: {'english': false, 'malayalam' : false},\n        q_edition_ar: 'quran-simple-enhanced',\n        q_edition_trans: ['en.asad', 'en.pickthall', 'ml.abdulhameed'],\n        q_edition_audio: 'ar.alafasy'\n\n      })\n    }\n    componentDidMount() {\n      //console.log(this.langs);\n      window.addEventListener('load', this.handleLoad);\n      //this.getLangs();\n    }\n    \n    \n    handleLoad(){\n      //console.log(Langs);\n      this.setState({\n         preloader: true\n      });\n      \n       \n      fetch('https://api.alquran.cloud/v1/surah')\n      .then(res => res.json())\n      .then((data) => {\n        let sList = [];\n        sList = data.data.map(chapter => {\n          return chapter;\n        });\n        //this.surahList = sList;\n        this.setState({\n          surahList: sList,\n          preloader: false\n        });\n        //console.log(this.state.surahList);\n      })\n      .catch(\n        this.setState({\n          preloader: false,\n          searchError: this.getErrMessage('list')\n        })\n      ) \n     \n    }\n    \n    searchForAyah_2() {\n      let filter = this.state.inputVal;\n      /*if(this.state.selectedSurah && this.state.selectedSurah.number){\n        filter = this.state.selectedSurah.number + \":\" + filter;\n      }*/\n      \n\n      fetch('https://api.alquran.cloud/v1/ayah/' + filter + '/editions/quran-simple-enhanced,en.asad,en.pickthall,ml.abdulhameed,ar.alafasy')\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({\n            searchError:'',\n            rawData :data,\n            searchBlockClass:'search-wrapper shrink'\n          });\n          console.log(data);\n          this.processData(data);\n          \n        })\n        .catch(\n          this.setState({\n           preloader: false,\n           searchError: 'err'\n          })\n        )\n    }\n\n    searchForAyah = (event) => {\n      this.setState({\n         preloader: true\n      });\n      let filter = this.state.inputVal;\n      let q_editions = (this.state.q_edition_ar + ',' + this.state.q_edition_trans + ',' + this.state.q_edition_audio) ;\n      \n      //console.log(q_editions);\n      if(String(filter).split(':').length <= 1){\n        if(this.state.selectedSurah.number){\n          filter = this.state.selectedSurah.number + \":\" + filter;\n        }\n      }\n      \n      if(!filter){\n        this.setState({\n          preloader: false,\n          searchError: 'no input'\n        })\n        return false;\n      }\n        fetch('https://api.alquran.cloud/v1/ayah/' + filter + '/editions/' + q_editions)\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({\n              searchError:'',\n              rawData :data,\n              searchBlockClass:'search-wrapper shrink'\n            }, () => this.processData(data));\n            \n            \n            \n          })\n          .catch(\n            this.setState({\n             preloader: false,\n             searchError: 'data error'\n            })\n          )\n      \n    }\n    \n    getErrMessage(src) {\n      let message = '';\n      //let inp = this.state.inputVal;\n      let splitV = this.state.inputVal.split(':');\n      let curSurah = this.state.selectedSurah;\n      if(src === 'list'){\n        message = 'Surah list data error';\n      } else {\n        if(splitV.length > 1){\n          if(Number(splitV[0]) > 114 || Number(splitV[0]) < 1){\n            message = 'Invalid Surah reference';\n          } else {\n            if(curSurah && (Number(splitV[1]) < 1 || Number(splitV[1]) > Number(curSurah.numberOfAyahs))){\n              message = 'Invalid Ayah number. Enter Ayah 1 through ' + curSurah.numberOfAyahs;\n            } else {\n              message = ''\n            }\n          }\n        } else {\n          if(Number(splitV[0]) < 1 || Number(splitV[0]) > 60232){\n            message = 'Invalid Ayah number. Enter any from 1 to 60232';\n          } else {\n            message = '';\n          }\n        }\n      }\n      return message;\n      \n    }\n    \n     processData(result) {\n      let res = [];\n      let audio = '';\n      let details = null;\n      \n      this.setState({ \n        ayahDetails: {},\n        mainResult: []\n      });\n      \n      //console.log(this.state.chkTrans.english);\n      //console.log(this.state.chkTrans.malayalam);\n        result.data.map(item => {\n            let filteredItem = null;\n            var flag = true;\n            /* separate audio details */\n            if(!item.audio){\n              \n              filteredItem = {'edition': item.edition, 'text': item.text};\n              switch(item.edition.language){\n                case 'en':\n                  flag = this.state.chkTrans.english;\n                  break;\n                case 'ml':\n                  flag = this.state.chkTrans.malayalam;\n                  break;\n                default:\n                  flag = true;\n                  \n              }\n              if(flag){\n                res.push(filteredItem);\n              }\n              flag = true;\n            }\n            else{\n              if(audio === ''){\n                audio = item.audio;\n              }\n            }\n            \n            if(!details){\n\n              details = item.surah;\n              \n              details = Object.assign(details, {\n                'hizbQuarter': item.hizbQuarter,\n                'juz': item.juz,  \n                'manzil': item.manzil,\n                'ayahNumber': item.number,\n                'numberInSurah': item.numberInSurah,\n                'page': item.page,\n                'ruku': item.ruku,\n                'sajda': item.sajda\n              });\n            }\n            return true;\n          }\n        )\n        \n        if(audio){\n          details = Object.assign(details, {'audio': audio});\n        }\n        this.setState({ \n          ayahDetails: details, \n          mainResult: res, \n          preloader: false\n        });\n       \n        \n        return true;\n      \n    }\n    \n    updateInputVal = (evt) => {\n      this.setState({\n        inputVal: evt.target.value\n      });\n    }\n    selectSurah = (evt) => {\n      let selSurah = [];\n      this.setState({\n        selectedSurah: null\n      });\n      if(evt.target.value > 0){\n        selSurah = this.state.surahList.filter(surah => Number(surah.number) === Number(evt.target.value));\n        \n        this.setState({\n          selectedSurah: selSurah[0]\n        });\n      }\n      console.log(selSurah);\n      \n      this.setState({ \n        ayahDetails: {},\n        mainResult: [], \n      }, () => {this.ayahInput.focus()});\n      \n    }\n    /*changeSurah = (evt) => {\n      console.log(evt.target.value);\n      let selSurah = [];\n      this.setState({\n        selectedSurah: null\n      });\n      if(evt.target.value > 0){\n        selSurah = this.state.surahList.filter(surah => Number(surah.number) === Number(evt.target.value));\n        \n        this.setState({\n          selectedSurah: selSurah[0]\n        });\n      }\n      console.log(selSurah);\n      \n      this.setState({ \n        ayahDetails: {},\n        mainResult: [],\n        inputVal: 1\n      }, () => {this.ayahInput.focus()});\n      \n    }*/\n    selectLang = evt => {\n      console.log(evt.target.getAttribute('data-value'));\n      \n      let lng = evt.target.getAttribute('data-value');\n      let eng = this.state.chkTrans.english;\n      let mal = this.state.chkTrans.malayalam;\n      switch (lng){\n        case 'en':\n          eng = true; //!eng;\n          mal = false;\n          break;\n        case 'ml':\n          mal = true; //!mal;\n          eng = false;\n          break;\n        default:\n      }\n      this.setState({\n        chkTrans:{\n          english: eng,\n          malayalam: mal\n        }\n      }, () => {\n        if(this.state.rawData && this.state.rawData.data){\n          this.processData(this.state.rawData);\n        }\n      });\n      \n    }\n    \n    /*chkSelectChange = evt => {\n      let targ = evt.target;\n      //let status; //this.state.chkTrans.malayalam;\n      let eng = Boolean(this.state.chkTrans.english);\n      let mal = Boolean(this.state.chkTrans.malayalam);\n      console.log(evt.target.value);\n      //console.log(evt.target.checked);\n      \n      \n      \n      switch(targ.value){\n       case \"english\":\n        //status = this.state.chkTrans.english;\n        eng = !eng;\n        this.setState({\n          chkTrans: {english: eng, malayalam: mal}\n        },() => {\n          console.log(this.state.chkTrans.elglish);\n          if(eng){\n            targ.className = \"toggle-btn selected\";\n          } else {\n            targ.className = \"toggle-btn\";\n          }\n          \n          if(this.state.rawData.status && this.state.rawData.status === 'OK'){\n            this.processData(this.state.rawData);\n          }\n        });\n        break;\n       case \"malayalam\":\n        //status = this.state.chkTrans.malayalam;\n        mal = !mal;\n        this.setState({\n          chkTrans: {english: eng, malayalam: mal}\n        },() => {\n          console.log(this.state.chkTrans.malayalam);\n          if(mal){\n            targ.className = \"toggle-btn selected\";\n          } else {\n            targ.className = \"toggle-btn\";\n          }\n          if(this.state.rawData.status && this.state.rawData.status === 'OK'){\n            this.processData(this.state.rawData);\n          }\n        });\n        break;\n       default:\n      }\n      \n      \n      \n      \n    }*/\n\nfindLang(array, title) {\n//console.log('find');\n  \n      let result = array.filter(item => item.code === title );\n      if(result.length){\n        return result[0];\n      } else {\n        return false;\n      }\n}\n\n  render(){\n    \n    /* <select id=\"surah-list\" onChange={evt => this.changeSurah(evt)} className=\"surah-select\">\n              <option value=\"0\" >--Select--</option>\n              { \n                surahs.map(el => <option value={el.number} key={el.number} > {el.number} - {el.englishName} </option>)\n              }\n            </select>\n            \n            <button className=\"toggle-btn\" value=\"malayalam\" onClick={this.chkSelectChange}>Mal</button>\n            */\n    let listview;\n    //console.log(this.langs);\n    if(this.state.mainResult.length){\n      listview = <Listview key={this.state.ayahDetails && this.state.number} results={this.state.mainResult} details={this.state.ayahDetails}/>\n    }\n    //console.log(this.findLang(Langs, 'ml'));\n    let surah = {};\n    const surahs = this.state.surahList;\n    const filteredLangs = Langs.filter(item => item.code === 'en' || item.code === 'ml' );\n    //console.log(langs);\n    let selectedTrans = '';\n    if(this.state.chkTrans.english){\n      selectedTrans = 'English';\n    } else {\n      if(this.state.chkTrans.malayalam){\n        selectedTrans = 'Malayalam';\n      } else {\n        selectedTrans = 'Select Language';\n      }\n    }\n    \n            const LangPopup =  () => (\n        <Popup\n          trigger={<a href=\"javascript:;\" className=\"toggle-btn align-self-center\" value=\"Translation\" >Translation: {selectedTrans} </a>}\n          on=\"click\"\n          position=\"center center\"\n          modal\n          closeOnDocumentClick\n        >\n        <div className=\"surah-wrapper\">\n          <h3>Select Language:</h3>\n          <ul>\n          {\n            filteredLangs.map(lng=> \n              <li data-value={lng.code} key={lng.code} onClick={this.selectLang} >{lng.code} - {lng.name} </li>\n            )\n          }\n          </ul>\n        </div>\n        </Popup>\n      )\n\n        /*const TipsSurah = () => (<Popup\n              trigger=\"\"\n              position=\"right top\"\n              open=\"1\"\n              closeOnDocumentClick\n              id=\"tip-surah\"\n            ><span>Tap to select Surah</span>\n            </Popup>\n        )*/\n      const SurahPopup =  () => (\n            <Popup\n              trigger={<a href=\"javascript:;\" value=\"Surahs\" className=\"surah-button\">Surah</a>}\n              on=\"click\"\n              position=\"center center\"\n              modal\n              closeOnDocumentClick\n              className=\"surah-popup\"\n            >\n            <div className=\"surah-wrapper\">\n              <h3>Select Surah:</h3>\n              <ul>\n              {\n                surahs.map(surah => <li value={surah.number} key={surah.number} onClick={this.selectSurah}>{surah.number} - {surah.englishName} </li>)\n              }\n              </ul>\n            </div>\n            </Popup>\n         \n          )\n          \n          /*<label htmlFor=\"surah-list\">Surah:</label>\n          <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h1\" size=\"small\" color=\"inherit\">\n              Q-Search\n            </Typography>\n          </Toolbar>\n        </AppBar>\n          */\n          const selectedSurah = this.state.selectedSurah\n  return (\n    <div className=\"page-wrapper\">\n      <header className=\"App-header\">\n       \n       <h1 onClick={this.resetView}>\n              Q-Search\n            </h1>\n            \n      </header>\n      {\n        selectedSurah.number && \n      <section className=\"titles-wrapper\">\n        \n          <h2 className=\"surah-title\">{selectedSurah.englishName} | {selectedSurah.name}</h2>\n          <p>{selectedSurah.englishNameTranslation}</p>\n           <p>Surah: <span className=\"clearer\">{selectedSurah.number}</span> | Ayah: <span className=\"clearer\">{this.state.inputVal ? this.state.inputVal : 'Not Selected'}</span></p>\n            <LangPopup />        \n          \n      </section>\n  }\n      \n      \n        <section className={this.state.searchBlockClass} id=\"search-block\">\n        <div className=\"row-flex ayah-input-wrapper\" >\n          <div className=\"row-flex\">\n            \n            <SurahPopup />\n            <div className=\"triangle-right\"><div className=\"inner\"></div></div>\n            {this.state.selectedSurah.englishName && \n              <p ref={(sur) => { this.surahLabel = sur; }} className=\"surah-name\">{this.state.selectedSurah.number}:</p>\n            }\n          </div>\n          <div className=\"ayah-input\">\n            <label hidden>Ayah Number:</label>\n            <input type=\"number\"\n              value={this.state.inputVal}\n              onChange={evt =>this.updateInputVal(evt)}\n              placeholder=\"Enter Ayah No\"\n              ref={(input) => { this.ayahInput = input; }} \n              className=\"input-ayah\"\n              pattern=\"^[0-9]*$\"\n              min=\"1\"\n              max={this.state.selectedSurah.numberOfAyahs}\n            />\n            {this.state.selectedSurah.englishName && \n              <label ref={(sur) => { this.surahLabel = sur; }} className=\"ayah-total\">of {this.state.selectedSurah.numberOfAyahs}</label>\n            }\n          </div>\n          <a href=\"javascript:;\" onClick={this.searchForAyah} role=\"button\" className=\"search-btn\">Search</a>\n          \n         </div> \n        \n          \n        </section>\n      <div className='content-wrapper'>\n        {listview}\n      </div>\n      \n      { this.state.preloader && \n        <Loader />\n      }\n      \n           \n    </div>\n    \n  );\n  }\n}\n//onChange={handleChange('checkedF')}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}