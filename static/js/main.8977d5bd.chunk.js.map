{"version":3,"sources":["components/Listview/Listview.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Listview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillUnmount","console","log","onClickNavigate","evt","curAyah","details","numberInSurah","surah","number","totAyah","numberOfAyahs","target","value","state","results","react_default","a","createElement","className","hidden","onClick","ayahNumber","reactjs_popup_es","trigger","on","position","closeOnDocumentClick","name","englishName","englishNameTranslation","List_default","component","disablePadding","dense","map","index","ListItem_default","key","ListItemText_default","edition","type","language","text","controls","src","audio","React","Component","Loader","App","event","filter","inputVal","setState","preloader","fetch","then","res","json","data","searchError","rawData","searchBlockClass","processData","catch","updateInputVal","changeSurah","selSurah","splitV","Array","split","length","push","surahList","selectedSurah","ayahInput","focus","chkSelectChange","targ","eng","Boolean","chkTrans","english","mal","malayalam","elglish","status","mainResult","ayahDetails","handleLoad","bind","assertThisInitialized","window","addEventListener","_this2","sList","chapter","getErrMessage","curSurah","Number","result","_this3","item","filteredItem","flag","assign","hizbQuarter","juz","manzil","page","ruku","sajda","listview","_this4","components_Listview_Listview","surahs","AppBar_default","color","Toolbar_default","Typography_default","variant","size","id","htmlFor","onChange","el","ref","sur","surahLabel","placeholder","input","components_Loader_Loader","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAwIeA,qBAnHX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,qBAAuB,WACnBC,QAAQC,IAAI,SANGT,EAQnBU,gBAAkB,SAACC,GACjB,IAAIC,EAAUZ,EAAKD,MAAMc,QAAQC,cAC7BC,EAAQf,EAAKD,MAAMc,QAAQG,OAC3BC,EAAUjB,EAAKD,MAAMc,QAAQK,cAGjC,OAAOP,EAAIQ,OAAOC,OAChB,IAAK,OACAR,EAAUK,EACXL,IAEGG,EAAQ,KACTA,IACAH,EAAU,GAEVJ,QAAQC,IAAI,8CAGhBD,QAAQC,IAAIM,EAAQ,IAAMH,GAE1B,MACF,IAAK,OACAA,EAAU,EACXA,IAEGG,EAAQ,EACTA,IAEAP,QAAQC,IAAI,gDAGhBD,QAAQC,IAAIM,EAAQ,IAAMH,GAC1B,MACF,QACEJ,QAAQC,IAAI,SAxChBT,EAAKqB,MAAQ,GAFIrB,wEAgDjB,IAAMsB,EAAUnB,KAAKJ,MAAMuB,QACrBT,EAAUV,KAAKJ,MAAMc,QA2B7B,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,UAAQE,QAAM,EAACC,QAASzB,KAAKO,gBAAiBU,MAAM,QAApD,QAEAG,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACjBH,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,YAAOZ,EAAQgB,YAAkBN,EAAAC,EAAAC,cAAA,WAA/C,aAA+DF,EAAAC,EAAAC,cAAA,YAAOZ,EAAQG,OAAf,IAAwBH,EAAQC,gBAE/FS,EAAAC,EAAAC,cAhCoB,kBACpBF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,QAASR,EAAAC,EAAAC,cAAA,UAAQL,MAAM,aAAd,aACTY,GAAG,QACHC,SAAS,cACTC,sBAAoB,GAEtBX,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,cACHF,EAAAC,EAAAC,cAAA,UAAKZ,EAAQsB,MACbZ,EAAAC,EAAAC,cAAA,SAAIZ,EAAQuB,YAAZ,MAA4BvB,EAAQwB,wBACnCd,EAAAC,EAAAC,cAAA,mBAAWZ,EAAQG,OAAnB,YAAoCH,EAAQC,mBAsB/C,OAEAS,EAAAC,EAAAC,cAAA,UAAQE,QAAM,EAACC,QAASzB,KAAKO,gBAAiBU,MAAM,QAApD,QACAG,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAMe,UAAU,KAAKC,gBAAgB,EAAOC,OAAO,GAChDnB,EAAQoB,IAAI,SAACtB,EAAOuB,GAAR,OACXpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAUqB,IAAKF,EAAOjB,UAAU,cAC9BH,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAcE,UAAU,cACC,gBAAvBN,EAAM2B,QAAQC,MACdzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBN,EAAM2B,QAAQX,aAE9Cb,EAAAC,EAAAC,cAAA,KAAGC,UAAsC,OAA3BN,EAAM2B,QAAQE,SAAmB,aAAc,IAAK7B,EAAM8B,MACzC,OAA3B9B,EAAM2B,QAAQE,UACd1B,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,SAAO0B,SAAS,YACd5B,EAAAC,EAAAC,cAAA,UAAQ2B,IAAKvC,EAAQwC,MAAOL,KAAK,cADnC,qCAEoCzB,EAAAC,EAAAC,cAAA,qBAFpC,2BAjGG6B,IAAMC,mBCRhBC,MARf,WAGE,OAAOjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACpBH,EAAAC,EAAAC,cAAA,yBCyWWgC,cAjVX,SAAAA,EAAY1D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IACjBzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,KAAMJ,KA8CR6B,QAAU,SAAC8B,GAET,IAAIC,EAAS3D,EAAKqB,MAAMuC,SACxB5D,EAAK6D,SAAS,CACXC,WAAW,IAEdC,MAAM,qCAAuCJ,EAAS,kFACrDK,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLnE,EAAK6D,SAAS,CACZO,YAAY,GACZC,QAASF,EACTG,iBAAiB,0BAEnB9D,QAAQC,IAAI0D,GACZnE,EAAKuE,YAAYJ,GACjBnE,EAAK6D,SAAS,CACZC,WAAW,MAGdU,MACCxE,EAAK6D,SAAS,CACbC,WAAW,EACXM,YAAa,UAtECpE,EA+KnByE,eAAiB,SAAC9D,GAChBX,EAAK6D,SAAS,CACZD,SAAUjD,EAAIQ,OAAOC,SAjLNpB,EAoLnB0E,YAAc,SAAC/D,GACbH,QAAQC,IAAIE,EAAIQ,OAAOC,OACvB,IAAIuD,EACAC,EAASC,MAAM,IAEnBD,EAAS5E,EAAKqB,MAAMuC,SAASkB,MAAM,MAGzBC,OAAS,EACjBH,EAAO,GAAKjE,EAAIQ,OAAOC,OAEvBwD,EAAO,GAAKjE,EAAIQ,OAAOC,MACvBwD,EAAOI,KAAK,MAIdhF,EAAK6D,SAAS,CACZD,SAAWgB,EAAO,GAAK,IAAMA,EAAO,KAEtCD,EAAW3E,EAAKqB,MAAM4D,UAAUtB,OAAO,SAAA5C,GAAK,OAAIA,EAAMC,QAAUL,EAAIQ,OAAOC,QAE3EpB,EAAK6D,SAAS,CACZqB,cAAeP,EAAS,KAG1B3E,EAAKmF,UAAUC,SA7MEpF,EAgNnBqF,gBAAkB,SAAA1E,GAChB,IAAI2E,EAAO3E,EAAIQ,OAEXoE,EAAMC,QAAQxF,EAAKqB,MAAMoE,SAASC,SAClCC,EAAMH,QAAQxF,EAAKqB,MAAMoE,SAASG,WAKtC,OAJApF,QAAQC,IAAIE,EAAIQ,OAAOC,OAIhBkE,EAAKlE,OACX,IAAK,UAEJmE,GAAOA,EACPvF,EAAK6D,SAAS,CACZ4B,SAAU,CAACC,QAASH,EAAKK,UAAWD,IACpC,WACAnF,QAAQC,IAAIT,EAAKqB,MAAMoE,SAASI,SAE9BP,EAAK5D,UADJ6D,EACgB,sBAEA,aAGhBvF,EAAKqB,MAAMgD,QAAQyB,QAAwC,OAA9B9F,EAAKqB,MAAMgD,QAAQyB,QACjD9F,EAAKuE,YAAYvE,EAAKqB,MAAMgD,WAGhC,MACD,IAAK,YAEJsB,GAAOA,EACP3F,EAAK6D,SAAS,CACZ4B,SAAU,CAACC,QAASH,EAAKK,UAAWD,IACpC,WACAnF,QAAQC,IAAIT,EAAKqB,MAAMoE,SAASG,WAE9BN,EAAK5D,UADJiE,EACgB,sBAEA,aAEhB3F,EAAKqB,MAAMgD,QAAQyB,QAAwC,OAA9B9F,EAAKqB,MAAMgD,QAAQyB,QACjD9F,EAAKuE,YAAYvE,EAAKqB,MAAMgD,aAvPlCrE,EAAKqB,MAAQ,CACX0E,WAAY,GACZnC,SAAU,GACVoC,YAAa,GACb3B,QAAS,GACTY,UAAW,GACXb,YAAa,GACbE,iBAAkB,iBAClBY,cAAe,GACfpB,WAAW,EACX2B,SAAU,CAACC,SAAW,EAAOE,WAAc,IAE7C5F,EAAKiG,WAAajG,EAAKiG,WAAWC,KAAhBjG,OAAAkG,EAAA,EAAAlG,CAAAD,IAClBA,EAAKqF,gBAAkBrF,EAAKqF,gBAAgBa,KAArBjG,OAAAkG,EAAA,EAAAlG,CAAAD,IAfNA,mFAmBjBoG,OAAOC,iBAAiB,OAAQlG,KAAK8F,iDAG3B,IAAAK,EAAAnG,KACVA,KAAK0D,SAAS,CACXC,WAAW,IAEdC,MAAM,sCACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACL,IAAIoC,EACJA,EAAQpC,EAAKA,KAAKzB,IAAI,SAAA8D,GACpB,OAAOA,IAGTF,EAAKzC,SAAS,CACZoB,UAAWsB,EACXzC,WAAW,MAIdU,MACCrE,KAAK0D,SAAS,CACZC,WAAW,EACXM,YAAajE,KAAKsG,cAAc,iDAgCxBrD,GAEFjD,KAAKkB,MAAMuC,SADrB,IAEIgB,EAASzE,KAAKkB,MAAMuC,SAASkB,MAAM,KACnC4B,EAAWvG,KAAKkB,MAAM6D,cAsB1B,MArBW,SAAR9B,EACS,wBAEPwB,EAAOG,OAAS,EACd4B,OAAO/B,EAAO,IAAM,KAAO+B,OAAO/B,EAAO,IAAM,EACtC,0BAEP8B,IAAaC,OAAO/B,EAAO,IAAM,GAAK+B,OAAO/B,EAAO,IAAM+B,OAAOD,EAASxF,gBACjE,6CAA+CwF,EAASxF,cAExD,GAIXyF,OAAO/B,EAAO,IAAM,GAAK+B,OAAO/B,EAAO,IAAM,MACpC,iDAEA,uCAQLgC,GAAQ,IAAAC,EAAA1G,KACf8D,EAAM,GACNZ,EAAQ,GACRxC,EAAU,KA+DZ,OA7DFV,KAAK0D,SAAS,CACZmC,YAAa,GACbD,WAAY,KAGdvF,QAAQC,IAAIN,KAAKkB,MAAMoE,SAASC,SAChClF,QAAQC,IAAIN,KAAKkB,MAAMoE,SAASG,WAC9BgB,EAAOzC,KAAKzB,IAAI,SAAAoE,GACZ,IAAIC,EAAe,KACfC,GAAO,EAEX,GAAIF,EAAKzD,MAoBM,KAAVA,IACDA,EAAQyD,EAAKzD,WArBF,CAGb,OADA0D,EAAe,CAAChE,QAAW+D,EAAK/D,QAASG,KAAQ4D,EAAK5D,MAC/C4D,EAAK/D,QAAQE,UAClB,IAAK,KACH+D,EAAOH,EAAKxF,MAAMoE,SAASC,QAC3B,MACF,IAAK,KACHsB,EAAOH,EAAKxF,MAAMoE,SAASG,UAC3B,MACF,QACEoB,GAAO,EAGRA,GACD/C,EAAIe,KAAK+B,GAEXC,GAAO,EAuBT,OAfInG,IAEFA,EAAUiG,EAAK/F,MAEfF,EAAUZ,OAAOgH,OAAOpG,EAAS,CAC/BqG,YAAeJ,EAAKI,YACpBC,IAAOL,EAAKK,IACZC,OAAUN,EAAKM,OACfvF,WAAciF,EAAK9F,OACnBF,cAAiBgG,EAAKhG,cACtBuG,KAAQP,EAAKO,KACbC,KAAQR,EAAKQ,KACbC,MAAST,EAAKS,UAGX,IAIRlE,IACDxC,EAAUZ,OAAOgH,OAAOpG,EAAS,CAACwC,MAASA,KAE7ClD,KAAK0D,SAAS,CAAEmC,YAAanF,EAASkF,WAAY9B,KAG3C,mCA0FL,IACFuD,EADEC,EAAAtH,KAEHA,KAAKkB,MAAM0E,WAAWhB,SACvByC,EAAWjG,EAAAC,EAAAC,cAACiG,EAAD,CAAUpG,QAASnB,KAAKkB,MAAM0E,WAAYlF,QAASV,KAAKkB,MAAM2E,eAOzE,IAAM2B,EAASxH,KAAKkB,MAAM4D,UACT9E,KAAKkB,MAAM6D,cAIhC,OACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACmG,EAAApG,EAAD,CAAQS,SAAS,SAAS4F,MAAM,WAC9BtG,EAAAC,EAAAC,cAACqG,EAAAtG,EAAD,KACED,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,CAAYwG,QAAQ,KAAKC,KAAK,QAAQJ,MAAM,WAA5C,eAONtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,WAASC,UAAWvB,KAAKkB,MAAMiD,iBAAkB4D,GAAG,gBACpD3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAO0G,QAAQ,cAAf,iBACA5G,EAAAC,EAAAC,cAAA,UAAQyG,GAAG,aAAaE,SAAU,SAAAzH,GAAG,OAAI8G,EAAK/C,YAAY/D,IAAMe,UAAU,gBACxEH,EAAAC,EAAAC,cAAA,UAAQL,MAAM,KAAd,gBAEEuG,EAAOjF,IAAI,SAAA2F,GAAE,OAAI9G,EAAAC,EAAAC,cAAA,UAAQL,MAAOiH,EAAGrH,OAAQ6B,IAAKwF,EAAGrH,QAAlC,IAA6CqH,EAAGrH,OAAhD,MAA2DqH,EAAGjG,YAA9D,QAGpBjC,KAAKkB,MAAM6D,cAAc9C,aACxBb,EAAAC,EAAAC,cAAA,SAAO6G,IAAK,SAACC,GAAUd,EAAKe,WAAaD,GAAQ7G,UAAU,cAAcvB,KAAKkB,MAAM6D,cAAc9C,cAGtGb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,SAAO0G,QAAQ,cAAf,kBACA5G,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OACV5B,MAAOjB,KAAKkB,MAAMuC,SAClBwE,SAAU,SAAAzH,GAAG,OAAG8G,EAAKhD,eAAe9D,IACpC8H,YAAY,uBACZH,IAAK,SAACI,GAAYjB,EAAKtC,UAAYuD,GACnChH,UAAU,gBAGZH,EAAAC,EAAAC,cAAA,UAAQG,QAASzB,KAAKyB,QAASR,MAAM,SAASM,UAAU,cAAxD,WAEDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaN,MAAM,UAAUQ,QAASzB,KAAKkF,iBAA7D,OACA9D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaN,MAAM,YAAYQ,QAASzB,KAAKkF,iBAA/D,SAKHmC,GAGDrH,KAAKkB,MAAMyC,WACXvC,EAAAC,EAAAC,cAACkH,EAAD,cAxUUrF,IAAMC,WCnBJiC,QACW,cAA7BY,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.8977d5bd.chunk.js","sourcesContent":["import React from 'react';\nimport List from '@material-ui/core/List';\n//import Box from '@material-ui/core/Box';\nimport ListItem from '@material-ui/core/ListItem';\n/*import ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';*/\n//import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\n/*import { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';*/\n//import Modal from '@material-ui/core/Modal';\nimport Popup from \"reactjs-popup\";\n\n//import IconButton from '@material-ui/core/IconButton';\n//import CommentIcon from '@material-ui/icons/Comment';\n//import Slide from '@material-ui/core/Slide';\nimport './Listview.scss';\n\n//import Copier from '../../modules/Copier/Copier';\n\n  class Listview extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n      }\n    }\n    componentWillUnmount = () => {\n        console.log('asdf');\n    }\n    onClickNavigate = (evt) => {\n      let curAyah = this.props.details.numberInSurah;\n      let surah = this.props.details.number;\n      let totAyah = this.props.details.numberOfAyahs;\n      \n      \n      switch(evt.target.value){\n        case \"Next\":\n          if(curAyah < totAyah){\n            curAyah++;\n          } else {\n            if(surah < 114){\n              surah++;\n              curAyah = 1;\n            } else {\n              console.log('You are on the last Ayah of the last Surah');\n            }\n          }\n          console.log(surah + ':' + curAyah);\n          //curAyah = this.props.details.numberOfAyahs\n          break;\n        case \"Prev\":\n          if(curAyah > 1){\n            curAyah--;\n          } else {\n            if(surah > 1){\n              surah--;\n            } else {\n              console.log('You are on the first Ayah of the first Surah');\n            }\n          }\n          console.log(surah + ':' + curAyah);\n          break;\n        default:\n          console.log('asd');\n          break;\n      }\n    }\n    render () {\n      //console.log(this.props);\n      const results = this.props.results;\n      const details = this.props.details;\n      //console.log(details);\n      const PopupOnFocus =  () => (\n        <Popup\n          trigger={<button value=\"More Info\">More Info</button>}\n          on=\"click\"\n          position=\"left center\"\n          closeOnDocumentClick\n        >\n        <div><center>\n          <h2>{details.name}</h2>\n          <p>{details.englishName} | {details.englishNameTranslation}</p>\n           <p>Surah: {details.number} | Ayah: {details.numberInSurah}</p>\n           \n          </center>\n        </div>\n        </Popup>\n      )\n      \n      \n      /*<ListItemSecondaryAction>\n            <IconButton hidden edge=\"end\" aria-label=\"Comments\">\n              \n            </IconButton>\n          \n          </ListItemSecondaryAction>*/\n          \n    return (\n      <div className=\"listview-wrapper\">\n      <button hidden onClick={this.onClickNavigate} value=\"Prev\" >prev</button>\n      \n      <section className=\"titles-wrapper\">\n        <p>In Qur'an: <span>{details.ayahNumber}</span><br />In Surah: <span>{details.number}:{details.numberInSurah}</span></p>\n        \n        <PopupOnFocus />\n      </section>\n        <button hidden onClick={this.onClickNavigate} value=\"Next\" >next</button>\n        <List component='ul' disablePadding={false} dense={false} >\n          {results.map((value, index) =>\n            <ListItem key={index} className=\"no-padding\">\n              <ListItemText className=\"verse-text\" >\n              { value.edition.type === 'translation' &&\n                <span className=\"ayah-details\">{value.edition.englishName}</span>\n              }\n                <p className={value.edition.language === 'ar'? \"txt-arabic\" :''}>{value.text}</p>\n                  { value.edition.language === 'ar' && \n                    <center>\n                      <audio controls=\"controls\">\n                        <source src={details.audio} type=\"audio/wav\" />\n                        Your browser does not support the <code>audio</code> element. \n                      </audio>\n                    </center>\n                  }\n              </ListItemText>\n            </ListItem>\n            )\n          }\n          \n        </List>\n        \n      </div>\n    )\n    }\n\n  }  ;\n \nexport default Listview","import React from 'react';\nimport './Loader.scss';\n\n\nfunction Loader() {\n  //const greeting = 'Hello Function Component!';\n\n  return <div className=\"loader-wrapper\">\n    <p>Loading...</p>\n  </div>;\n}\n\nexport default Loader;","\nimport React from 'react';\n//import logo from './logo.svg';\nimport './App.scss';\nimport 'typeface-roboto';\n//import TextField from '@material-ui/core/TextField';\n\n//import PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n//import Popover from '@material-ui/core/Popover';\n\nimport Typography from '@material-ui/core/Typography';\n\n//import Button from '@material-ui/core/Button';\n//import Tabs from '@material-ui/core/Tabs';\n//import Tab from '@material-ui/core/Tab';\n\n//import FormGroup from '@material-ui/core/FormGroup';\n//import FormControlLabel from '@material-ui/core/FormControlLabel';\n//import Checkbox from '@material-ui/core/Checkbox';\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n//import Favorite from '@material-ui/icons/Favorite';\n//import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nimport Listview from './components/Listview/Listview';\nimport Loader from './components/Loader/Loader';\n//import Checkbox from './components/Checkbox/Checkbox';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        mainResult: [],\n        inputVal: '',\n        ayahDetails: {},\n        rawData: {},\n        surahList: [],\n        searchError: '',\n        searchBlockClass: 'search-wrapper',\n        selectedSurah: {},\n        preloader: true,\n        chkTrans: {'english': false, 'malayalam' : false}\n      }\n      this.handleLoad = this.handleLoad.bind(this);\n      this.chkSelectChange = this.chkSelectChange.bind(this);\n    }\n    \n    componentDidMount() {\n      window.addEventListener('load', this.handleLoad);\n    }\n    \n    handleLoad(){\n      this.setState({\n         preloader: true\n      });\n      fetch('https://api.alquran.cloud/v1/surah')\n      .then(res => res.json())\n      .then((data) => {\n        let sList = [];\n        sList = data.data.map(chapter => {\n          return chapter;\n        });\n        //this.surahList = sList;\n        this.setState({\n          surahList: sList,\n          preloader: false\n        });\n        //console.log(this.state.surahList);\n      })\n      .catch(\n        this.setState({\n          preloader: false,\n          searchError: this.getErrMessage('list')\n        })\n      )\n    }\n    onClick = (event) => {\n      \n      let filter = this.state.inputVal;\n      this.setState({\n         preloader: true\n      });\n      fetch('https://api.alquran.cloud/v1/ayah/' + filter + '/editions/quran-simple-enhanced,en.asad,en.pickthall,ml.abdulhameed,ar.alafasy')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          searchError:'',\n          rawData :data,\n          searchBlockClass:'search-wrapper shrink'\n        });\n        console.log(data);\n        this.processData(data);\n        this.setState({\n          preloader: false\n        });\n      })\n      .catch(\n        this.setState({\n         preloader: false,\n         searchError: 'err'\n        })\n      )\n    }\n    \n    getErrMessage(src) {\n      let message = '';\n      let inp = this.state.inputVal;\n      let splitV = this.state.inputVal.split(':');\n      let curSurah = this.state.selectedSurah;\n      if(src === 'list'){\n        message = 'Surah list data error';\n      } else {\n        if(splitV.length > 1){\n          if(Number(splitV[0]) > 114 || Number(splitV[0]) < 1){\n            message = 'Invalid Surah reference';\n          } else {\n            if(curSurah && (Number(splitV[1]) < 1 || Number(splitV[1]) > Number(curSurah.numberOfAyahs))){\n              message = 'Invalid Ayah number. Enter Ayah 1 through ' + curSurah.numberOfAyahs;\n            } else {\n              message = ''\n            }\n          }\n        } else {\n          if(Number(splitV[0]) < 1 || Number(splitV[0]) > 60232){\n            message = 'Invalid Ayah number. Enter any from 1 to 60232';\n          } else {\n            message = '';\n          }\n        }\n      }\n      return message;\n      \n    }\n    \n     processData(result) {\n      let res = [];\n      let audio = '';\n      let details = null;\n      \n      this.setState({ \n        ayahDetails: {},\n        mainResult: []\n      });\n      \n      console.log(this.state.chkTrans.english);\n      console.log(this.state.chkTrans.malayalam);\n        result.data.map(item => {\n            let filteredItem = null;\n            var flag = true;\n            /* separate audio details */\n            if(!item.audio){\n              \n              filteredItem = {'edition': item.edition, 'text': item.text};\n              switch(item.edition.language){\n                case 'en':\n                  flag = this.state.chkTrans.english;\n                  break;\n                case 'ml':\n                  flag = this.state.chkTrans.malayalam;\n                  break;\n                default:\n                  flag = true;\n                  \n              }\n              if(flag){\n                res.push(filteredItem);\n              }\n              flag = true;\n            }\n            else{\n              if(audio === ''){\n                audio = item.audio;\n              }\n            }\n            \n            if(!details){\n\n              details = item.surah;\n              \n              details = Object.assign(details, {\n                'hizbQuarter': item.hizbQuarter,\n                'juz': item.juz,  \n                'manzil': item.manzil,\n                'ayahNumber': item.number,\n                'numberInSurah': item.numberInSurah,\n                'page': item.page,\n                'ruku': item.ruku,\n                'sajda': item.sajda\n              });\n            }\n            return true;\n          }\n        )\n        \n        if(audio){\n          details = Object.assign(details, {'audio': audio});\n        }\n        this.setState({ ayahDetails: details, mainResult: res});\n       \n        \n        return true;\n      \n    }\n    \n    updateInputVal = (evt) => {\n      this.setState({\n        inputVal: evt.target.value\n      });\n    }\n    changeSurah = (evt) => {\n      console.log(evt.target.value);\n      let selSurah = [];\n      let splitV = Array(2);\n      \n      splitV = this.state.inputVal.split(':');\n      \n      \n      if(splitV.length > 1){\n        splitV[0] = evt.target.value;\n      } else {\n        splitV[0] = evt.target.value;\n        splitV.push(\"1\");\n      }\n      //console.log(splitV);\n      \n      this.setState({\n        inputVal: (splitV[0] + \":\" + splitV[1])\n      });\n      selSurah = this.state.surahList.filter(surah => surah.number == evt.target.value);\n      //console.log(selSurah);\n      this.setState({\n        selectedSurah: selSurah[0]\n      });\n      \n      this.ayahInput.focus();\n     \n    }\n    chkSelectChange = evt => {\n      let targ = evt.target;\n      //let status; //this.state.chkTrans.malayalam;\n      let eng = Boolean(this.state.chkTrans.english);\n      let mal = Boolean(this.state.chkTrans.malayalam);\n      console.log(evt.target.value);\n      //console.log(evt.target.checked);\n      \n      \n      switch(targ.value){\n       case \"english\":\n        //status = this.state.chkTrans.english;\n        eng = !eng;\n        this.setState({\n          chkTrans: {english: eng, malayalam: mal}\n        },() => {\n          console.log(this.state.chkTrans.elglish);\n          if(eng){\n            targ.className = \"toggle-btn selected\";\n          } else {\n            targ.className = \"toggle-btn\";\n          }\n          \n          if(this.state.rawData.status && this.state.rawData.status === 'OK'){\n            this.processData(this.state.rawData);\n          }\n        });\n        break;\n       case \"malayalam\":\n        //status = this.state.chkTrans.malayalam;\n        mal = !mal;\n        this.setState({\n          chkTrans: {english: eng, malayalam: mal}\n        },() => {\n          console.log(this.state.chkTrans.malayalam);\n          if(mal){\n            targ.className = \"toggle-btn selected\";\n          } else {\n            targ.className = \"toggle-btn\";\n          }\n          if(this.state.rawData.status && this.state.rawData.status === 'OK'){\n            this.processData(this.state.rawData);\n          }\n        });\n        break;\n       default:\n      }\n      \n      \n      \n      \n    }\n\n  render(){\n    let listview;\n    if(this.state.mainResult.length){\n      listview = <Listview results={this.state.mainResult} details={this.state.ayahDetails}/>\n    } /*else {\n      if(this.state.searchError) {\n        listview = <p className='error-txt'>The Referrence entered is Invalid</p>\n      }\n    }*/\n    \n      const surahs = this.state.surahList;\n      const curSurah = this.state.selectedSurah;\n      \n           //console.log(this.state.selectedSurah);\n           \n  return (\n    <div className=\"page-wrapper\">\n      <header>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h1\" size=\"small\" color=\"inherit\">\n              Q-Search\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n      \n      <div className='content-wrapper'>\n        <section className={this.state.searchBlockClass} id=\"search-block\">\n        <div className=\"row-flex ayah-input-wrapper\">\n          <div className=\"col-flex\">\n            <label htmlFor=\"surah-list\">Select Surah:</label>\n            <select id=\"surah-list\" onChange={evt => this.changeSurah(evt)} className=\"surah-select\">\n              <option value=\"0\" >Select Surah</option>\n              { \n                surahs.map(el => <option value={el.number} key={el.number} > {el.number} - {el.englishName} </option>)\n              }\n            </select>\n            {this.state.selectedSurah.englishName && \n              <label ref={(sur) => { this.surahLabel = sur; }} className=\"surah-name\">{this.state.selectedSurah.englishName}</label>\n            }\n          </div>\n          <div className=\"col-flex\">\n          <label htmlFor=\"ayah-input\" >Enter Ayah No:</label>\n          <input type=\"text\"\n            value={this.state.inputVal}\n            onChange={evt =>this.updateInputVal(evt)}\n            placeholder=\"Enter ayah to search\"\n            ref={(input) => { this.ayahInput = input; }} \n            className=\"input-ayah\"\n            />\n          </div>\n          <button onClick={this.onClick} value=\"Search\" className=\"search-btn\">Search</button>\n         </div> \n         <div className=\"trans-wrapper\">\n            <label>Translations: </label>\n            <button className=\"toggle-btn\" value=\"english\" onClick={this.chkSelectChange}>Eng</button>\n            <button className=\"toggle-btn\" value=\"malayalam\" onClick={this.chkSelectChange}>Mal</button>\n            \n          </div>\n          \n        </section>\n        {listview}\n      </div>\n      \n      { this.state.preloader && \n        <Loader />\n      }\n      \n           \n    </div>\n    \n  );\n  }\n}\n//onChange={handleChange('checkedF')}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}